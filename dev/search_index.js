var documenterSearchIndex = {"docs":
[{"location":"apis/interface/#User-Interface","page":"User interface","title":"User Interface","text":"","category":"section"},{"location":"apis/interface/#Problem-Definition","page":"User interface","title":"Problem Definition","text":"","category":"section"},{"location":"apis/interface/#NCTSSoS.PolyOpt","page":"User interface","title":"NCTSSoS.PolyOpt","text":"PolyOpt{P} <: OptimizationProblem\n\nA polynomial optimization problem structure.\n\nType Parameters\n\nP: Type of polynomial, either Polynomial{T} or NCStatePolynomial{T}\n\nFields\n\nobjective::P: The polynomial objective function to be optimized\neq_constraints::Vector{P}: Vector of equality constraints (assumed to equal 0)\nineq_constraints::Vector{P}: Vector of inequality constraints (assumed to be >= 0)\nvariables::Vector{Variable}: All variables appearing in the problem\ncomm_gps::Vector{Vector{Variable}}: Commutative groups - vectors of variables that commute with variables not in the same group\nis_unipotent::Bool: Whether variables square to 1 (e.g., Pauli operators, SWAP operators)\nis_projective::Bool: Whether variables are projective (X² = X)\n\nNotes\n\nAll constraints are assumed to be simplified using comm_gp, is_unipotent, and is_projective\nThe problem cannot be both unipotent and projective simultaneously\nCommutative groups must be disjoint sets\n\n\n\n\n\n","category":"type"},{"location":"apis/interface/#NCTSSoS.polyopt","page":"User interface","title":"NCTSSoS.polyopt","text":"polyopt(objective::P; eq_constraints=Any[], ineq_constraints=Any[], comm_gps=Vector{Variable}[], is_unipotent::Bool=false, is_projective::Bool=false) where {T,P<:AbstractPolynomial{T}}\n\nCreate a polynomial optimization problem.\n\nArguments\n\nobjective::P: The polynomial objective function to optimize.\neq_constraints=Any[]: Equality constraints as polynomials (p = 0).\nineq_constraints=Any[]: Inequality constraints as polynomials (p ≥ 0).\ncomm_gps=Vector{Variable}[]: Groups of variables that commute. If empty, all variables are assumed to commute.\nis_unipotent::Bool=false: Flag indicating if the problem is unipotent.\nis_projective::Bool=false: Flag indicating if the problem is projective.\n\nReturns\n\nA PolyOpt{P} structure representing the polynomial optimization problem.\n\nNotes\n\nThe polynomial coefficients cannot be integers as they are not supported by JuMP solvers.\nCommutative groups must be disjoint, and all commutative variables must be a subset of all variables.\nA problem cannot be both unipotent and projective simultaneously.\n\n\n\n\n\n","category":"function"},{"location":"apis/interface/#Solver-Interface","page":"User interface","title":"Solver Interface","text":"","category":"section"},{"location":"apis/interface/#NCTSSoS.SolverConfig","page":"User interface","title":"NCTSSoS.SolverConfig","text":"SolverConfig(; optimizer, order, cs_algo=NoElimination(), ts_algo=NoElimination())\n\nConfiguration for solving polynomial optimization problems.\n\nKeyword Arguments\n\noptimizer (required): The optimizer to use for solving the SDP problem (e.g. Clarabel.Optimizer)\norder::Int: The order of the moment relaxation (default: 0)\ncs_algo::EliminationAlgorithm: Algorithm for correlative sparsity exploitation (default: NoElimination())\nts_algo::EliminationAlgorithm: Algorithm for term sparsity exploitation (default: NoElimination())\n\nExamples\n\njulia> solver_config = SolverConfig(optimizer=Clarabel.Optimizer, order=2) # default elimination algorithms\nSolverConfig(Clarabel.MOIwrapper.Optimizer, 2, NoElimination(), NoElimination())\n\n\n\n\n\n","category":"type"},{"location":"apis/interface/#NCTSSoS.cs_nctssos","page":"User interface","title":"NCTSSoS.cs_nctssos","text":"cs_nctssos(pop::PolyOpt{P}, solver_config::SolverConfig; dualize::Bool=true) where {P}\n\nSolve a polynomial optimization problem using the CS-NCTSSOS method with correlative sparsity and term sparsity exploitation.\n\nArguments\n\npop::PolyOpt{P}: The polynomial optimization problem to solve\nsolver_config::SolverConfig: Configuration containing optimizer, moment order, and sparsity algorithms\n\nKeyword Arguments\n\ndualize::Bool=true: Whether to dualize the moment relaxation to a sum-of-squares problem\n\nReturns\n\nPolyOptResult: Result containing the objective value, correlative sparsity structure, and term sparsity information\n\nDescription\n\nThis function solves a polynomial optimization problem by:\n\nComputing correlative sparsity to decompose the problem into smaller cliques\nComputing term sparsity for each clique to further reduce problem size\nFormulating and solving either the moment relaxation or its SOS dual\nReturning the optimal objective value and sparsity information\n\nThe moment order is automatically determined from the polynomial degrees if not specified in solver_config.\n\n\n\n\n\n","category":"function"},{"location":"apis/interface/#NCTSSoS.cs_nctssos_higher","page":"User interface","title":"NCTSSoS.cs_nctssos_higher","text":"cs_nctssos_higher(pop::PolyOpt{T}, prev_res::PolyOptResult, solver_config::SolverConfig; dualize::Bool=true) where {T}\n\nSolve a polynomial optimization problem using higher-order term sparsity based on a previous result.\n\nArguments\n\npop::PolyOpt{T}: The polynomial optimization problem to solve\nprev_res::PolyOptResult: Previous optimization result containing sparsity information to build upon\nsolver_config::SolverConfig: Configuration containing optimizer and sparsity algorithms\n\nKeyword Arguments\n\ndualize::Bool=true: Whether to dualize the moment relaxation to a sum-of-squares problem\n\nReturns\n\nPolyOptResult: Result containing the objective value, correlative sparsity structure, and updated term sparsity information\n\nDescription\n\nThis function performs a higher-order iteration of the CS-NCTSSOS method by:\n\nUsing the correlative sparsity structure from the previous result\nComputing new term sparsity based on the union of previously activated supports\nFormulating and solving either the moment relaxation or its SOS dual with the refined sparsity\nReturning the optimal objective value and updated sparsity information\n\nThis is typically used when the previous relaxation was not tight enough and a higher-order relaxation is needed.\n\n\n\n\n\n","category":"function"},{"location":"manual/polynomial_optimization/#polynomial-optimization","page":"Polynomial Optimization","title":"Polynomial Optimization","text":"","category":"section"},{"location":"manual/polynomial_optimization/","page":"Polynomial Optimization","title":"Polynomial Optimization","text":"Polynomial optimization is a mathematical optimization problem where the objective function is a polynomial of variable unknowns and the constraints are polynomial inequalities and equalities. In general, finding the exact solution to a polynomial optimization problem is NP-hard(Wang and Magron, 2021). However, moment and sum-of-squares relaxations can be applied to obtain lower/upper bounds to polynomial optimization problems efficiently.","category":"page"},{"location":"manual/polynomial_optimization/#noncommutative-polynomial-optimization","page":"Polynomial Optimization","title":"Noncommutative Polynomial Optimization","text":"","category":"section"},{"location":"manual/polynomial_optimization/","page":"Polynomial Optimization","title":"Polynomial Optimization","text":"Noncommutative polynomial optimization concerns when variables are noncommuting. These variables can be thought of as matrices or operators acting on an (infinite dimension) separable Hilbert space mathcalH. The numerical value of the objective function may take two meanings.","category":"page"},{"location":"manual/polynomial_optimization/","page":"Polynomial Optimization","title":"Polynomial Optimization","text":"The eigenvalue of the polynomial of operators, giving a general form of minimization problem as","category":"page"},{"location":"manual/polynomial_optimization/","page":"Polynomial Optimization","title":"Polynomial Optimization","text":"mathrminf_mathbfxinmathcalB(mathcalH)^n lambda_min(f(mathbfx))  text st  g_1(mathbfx)ge0ldotsg_m(mathbfx)ge0h_1(mathbfx)=0ldotsh_ell(mathbfx)=0","category":"page"},{"location":"manual/polynomial_optimization/","page":"Polynomial Optimization","title":"Polynomial Optimization","text":"The trace of the polynomial of operators, giving a general form of minimization problem as","category":"page"},{"location":"manual/polynomial_optimization/","page":"Polynomial Optimization","title":"Polynomial Optimization","text":"mathrminf_mathbfxinmathcalB(mathcalH)^n mathrmtr(f(mathbfx))  text st  g_1(mathbfx)ge0ldotsg_m(mathbfx)ge0h_1(mathbfx)=0ldotsh_ell(mathbfx)=0","category":"page"},{"location":"manual/polynomial_optimization/","page":"Polynomial Optimization","title":"Polynomial Optimization","text":"where","category":"page"},{"location":"manual/polynomial_optimization/","page":"Polynomial Optimization","title":"Polynomial Optimization","text":"fg_1ldotsg_mh_1ldotsh_ellinmathbbRlanglemathbfxrangle","category":"page"},{"location":"manual/polynomial_optimization/","page":"Polynomial Optimization","title":"Polynomial Optimization","text":"are noncommutative polynomials in noncommuting variables mathbfx.","category":"page"},{"location":"examples/generated/trace_poly/#Tracial-Polynomial-Optimization","page":"Trace Polynomial","title":"Tracial Polynomial Optimization","text":"","category":"section"},{"location":"examples/generated/trace_poly/#Toy-Example","page":"Trace Polynomial","title":"Toy Example","text":"","category":"section"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"Let's learn how to do tracial polynomial optimization from a toy example.","category":"page"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"We use NCTSSoS.FastPolynomials.tr to declare a part of a term in tracial polynomial.","category":"page"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"using NCTSSoS, MosekTools\nusing NCTSSoS.FastPolynomials:tr, Monomial\n@ncpolyvar x[1:3]\n\np = (tr(x[1] * x[2] * x[3]) + tr(x[1] * x[2]) * tr(x[3])) * one(Monomial)","category":"page"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"1.0 * tr(x₃¹) * tr(x₁¹x₂¹) * 1 + 1.0 * tr(x₁¹x₂¹x₃¹) * 1","category":"page"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"Polynomial Optimization declaration and solving interface is the same as regular polynomial optimization.","category":"page"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"spop = polyopt(p; is_projective=true, comm_gps=[x])\n\nsolver_config = SolverConfig(; optimizer=Mosek.Optimizer, order=2)\n\nresult = cs_nctssos(spop, solver_config)\n\n@assert isapprox(result.objective , -0.046717378455438933, atol = 1e-6)\n\nsolver_config = SolverConfig(; optimizer=Mosek.Optimizer, order=3)\n\nresult = cs_nctssos(spop, solver_config)\n\n@assert isapprox(result.objective, -0.03124998978001017, atol = 1e-6)","category":"page"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"Problem\n  Name                   :                 \n  Objective sense        : maximize        \n  Type                   : CONIC (conic optimization problem)\n  Constraints            : 81              \n  Affine conic cons.     : 0               \n  Disjunctive cons.      : 0               \n  Cones                  : 0               \n  Scalar variables       : 1               \n  Matrix variables       : 1 (scalarized: 496)\n  Integer variables      : 0               \n\nOptimizer started.\nPresolve started.\nLinear dependency checker started.\nLinear dependency checker terminated.\nEliminator started.\nFreed constraints in eliminator : 0\nEliminator terminated.\nEliminator - tries                  : 1                 time                   : 0.00            \nLin. dep.  - tries                  : 1                 time                   : 0.00            \nLin. dep.  - primal attempts        : 1                 successes              : 1               \nLin. dep.  - dual attempts          : 0                 successes              : 0               \nLin. dep.  - primal deps.           : 0                 dual deps.             : 0               \nPresolve terminated. Time: 0.00    \nOptimizer  - threads                : 12              \nOptimizer  - solved problem         : the primal      \nOptimizer  - Constraints            : 81              \nOptimizer  - Cones                  : 1               \nOptimizer  - Scalar variables       : 2                 conic                  : 2               \nOptimizer  - Semi-definite variables: 1                 scalarized             : 496             \nFactor     - setup time             : 0.00            \nFactor     - dense det. time        : 0.00              GP order time          : 0.00            \nFactor     - nonzeros before factor : 3321              after factor           : 3321            \nFactor     - dense dim.             : 0                 flops                  : 5.82e+05        \nITE PFEAS    DFEAS    GFEAS    PRSTATUS   POBJ              DOBJ              MU       TIME  \n0   2.0e+00  1.0e+00  1.0e+00  0.00e+00   -0.000000000e+00  -0.000000000e+00  1.0e+00  0.00  \n1   5.1e-01  2.5e-01  9.0e-02  8.85e-01   -1.203138438e-01  -7.729174112e-03  2.5e-01  0.00  \n2   1.7e-01  8.6e-02  1.5e-02  2.46e+00   -4.819246707e-02  -3.625632780e-02  8.6e-02  0.00  \n3   3.9e-02  1.9e-02  1.5e-03  1.31e+00   -5.002577131e-02  -4.747173568e-02  1.9e-02  0.00  \n4   1.5e-02  7.4e-03  3.3e-04  1.04e+00   -4.859732575e-02  -4.744618389e-02  7.4e-03  0.00  \n5   4.8e-03  2.4e-03  5.9e-05  1.03e+00   -4.767388974e-02  -4.725934756e-02  2.4e-03  0.00  \n6   1.1e-03  5.3e-04  5.3e-06  1.11e+00   -4.657974322e-02  -4.647086106e-02  5.3e-04  0.00  \n7   2.0e-04  9.9e-05  4.0e-07  1.08e+00   -4.670949611e-02  -4.668850464e-02  9.9e-05  0.00  \n8   3.7e-05  1.9e-05  3.2e-08  1.03e+00   -4.671561937e-02  -4.671164060e-02  1.9e-05  0.00  \n9   1.6e-06  8.1e-07  2.9e-10  1.01e+00   -4.671741226e-02  -4.671723469e-02  8.1e-07  0.01  \n10  4.1e-08  2.0e-08  1.1e-12  1.00e+00   -4.671737846e-02  -4.671737400e-02  2.0e-08  0.01  \nOptimizer terminated. Time: 0.01    \n\nProblem\n  Name                   :                 \n  Objective sense        : maximize        \n  Type                   : CONIC (conic optimization problem)\n  Constraints            : 395             \n  Affine conic cons.     : 0               \n  Disjunctive cons.      : 0               \n  Cones                  : 0               \n  Scalar variables       : 1               \n  Matrix variables       : 1 (scalarized: 5886)\n  Integer variables      : 0               \n\nOptimizer started.\nPresolve started.\nLinear dependency checker started.\nLinear dependency checker terminated.\nEliminator started.\nFreed constraints in eliminator : 0\nEliminator terminated.\nEliminator - tries                  : 1                 time                   : 0.00            \nLin. dep.  - tries                  : 1                 time                   : 0.00            \nLin. dep.  - primal attempts        : 1                 successes              : 1               \nLin. dep.  - dual attempts          : 0                 successes              : 0               \nLin. dep.  - primal deps.           : 0                 dual deps.             : 0               \nPresolve terminated. Time: 0.00    \nOptimizer  - threads                : 12              \nOptimizer  - solved problem         : the primal      \nOptimizer  - Constraints            : 395             \nOptimizer  - Cones                  : 1               \nOptimizer  - Scalar variables       : 2                 conic                  : 2               \nOptimizer  - Semi-definite variables: 1                 scalarized             : 5886            \nFactor     - setup time             : 0.00            \nFactor     - dense det. time        : 0.00              GP order time          : 0.00            \nFactor     - nonzeros before factor : 7.82e+04          after factor           : 7.82e+04        \nFactor     - dense dim.             : 0                 flops                  : 6.45e+07        \nITE PFEAS    DFEAS    GFEAS    PRSTATUS   POBJ              DOBJ              MU       TIME  \n0   2.0e+00  1.0e+00  1.0e+00  0.00e+00   -0.000000000e+00  -0.000000000e+00  1.0e+00  0.00  \n1   6.1e-01  3.0e-01  1.2e-01  9.56e-01   -1.098826759e-01  8.384488153e-03   3.0e-01  0.01  \n2   2.4e-01  1.2e-01  2.0e-02  2.74e+00   -1.722756033e-02  2.650243250e-03   1.2e-01  0.02  \n3   7.4e-02  3.7e-02  2.7e-03  2.08e+00   -1.942829823e-02  -1.541146059e-02  3.7e-02  0.02  \n4   2.8e-02  1.4e-02  5.5e-04  1.48e+00   -1.904050130e-02  -1.767364397e-02  1.4e-02  0.03  \n5   1.1e-02  5.5e-03  1.4e-04  1.04e+00   -2.539912202e-02  -2.482691544e-02  5.5e-03  0.04  \n6   3.2e-03  1.6e-03  2.2e-05  1.03e+00   -2.905843863e-02  -2.887813024e-02  1.6e-03  0.04  \n7   1.1e-03  5.4e-04  4.3e-06  9.81e-01   -3.055329434e-02  -3.049111225e-02  5.4e-04  0.05  \n8   3.0e-05  1.5e-05  1.8e-08  1.01e+00   -3.123181602e-02  -3.122977473e-02  1.5e-05  0.06  \n9   8.7e-07  4.4e-07  8.8e-11  1.00e+00   -3.124951147e-02  -3.124945186e-02  4.4e-07  0.06  \n10  2.0e-08  1.0e-08  3.0e-13  1.00e+00   -3.124998978e-02  -3.124998842e-02  1.0e-08  0.07  \nOptimizer terminated. Time: 0.07    \n\n","category":"page"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"The results matches within 10^-6 absolute tolerance comparing to answer in (Klep et al., 2022)!","category":"page"},{"location":"examples/generated/trace_poly/#Polynomial-Bell-Inequalities","page":"Trace Polynomial","title":"Polynomial Bell Inequalities","text":"","category":"section"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"Polynomial Bell inequalities provide a powerful framework for detecting quantum entanglement and non-locality in bipartite quantum systems. These inequalities impose constraints on the correlations that can be achieved by local hidden variable models, and their violation serves as a signature of quantum mechanical behavior. For maximally entangled bipartite states, such as Bell states, the quantum correlations can exceed the classical bounds imposed by these polynomial inequalities, demonstrating the non-local nature of quantum entanglement. The following examples illustrate how tracial polynomial optimization can be used to compute the maximum violation of specific Bell inequalities, revealing the extent to which quantum mechanics transcends classical limitations.","category":"page"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"using NCTSSoS, MosekTools\nusing NCTSSoS.FastPolynomials:tr, Monomial\n\n@ncpolyvar x[1:2] y[1:2]\n\np = -1.0 * tr(x[1] * y[1]) - 1.0 * tr(x[1] * y[2]) - 1.0 * tr(x[2] * y[1]) + 1.0 * tr(x[2] * y[2])\n\ntpop = polyopt(p * one(Monomial); is_unipotent=true)\n\nsolver_config = SolverConfig(; optimizer=Mosek.Optimizer, order=1, ts_algo=MaximalElimination())\n\nresult = cs_nctssos(tpop, solver_config)\n\n@assert isapprox(result.objective, -2.8284271157283083, atol = 1e-5)","category":"page"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"Problem\n  Name                   :                 \n  Objective sense        : maximize        \n  Type                   : CONIC (conic optimization problem)\n  Constraints            : 17              \n  Affine conic cons.     : 0               \n  Disjunctive cons.      : 0               \n  Cones                  : 0               \n  Scalar variables       : 1               \n  Matrix variables       : 2 (scalarized: 37)\n  Integer variables      : 0               \n\nOptimizer started.\nPresolve started.\nLinear dependency checker started.\nLinear dependency checker terminated.\nEliminator started.\nFreed constraints in eliminator : 0\nEliminator terminated.\nEliminator - tries                  : 1                 time                   : 0.00            \nLin. dep.  - tries                  : 1                 time                   : 0.00            \nLin. dep.  - primal attempts        : 1                 successes              : 1               \nLin. dep.  - dual attempts          : 0                 successes              : 0               \nLin. dep.  - primal deps.           : 0                 dual deps.             : 0               \nPresolve terminated. Time: 0.00    \nOptimizer  - threads                : 12              \nOptimizer  - solved problem         : the primal      \nOptimizer  - Constraints            : 17              \nOptimizer  - Cones                  : 1               \nOptimizer  - Scalar variables       : 3                 conic                  : 2               \nOptimizer  - Semi-definite variables: 1                 scalarized             : 36              \nFactor     - setup time             : 0.00            \nFactor     - dense det. time        : 0.00              GP order time          : 0.00            \nFactor     - nonzeros before factor : 153               after factor           : 153             \nFactor     - dense dim.             : 0                 flops                  : 4.70e+03        \nITE PFEAS    DFEAS    GFEAS    PRSTATUS   POBJ              DOBJ              MU       TIME  \n0   4.0e+00  1.0e+00  1.0e+00  0.00e+00   -0.000000000e+00  -0.000000000e+00  1.0e+00  0.00  \n1   1.6e+00  4.0e-01  4.2e-01  -4.35e-02  -1.045860826e+00  -1.478035613e+00  4.0e-01  0.00  \n2   4.0e-01  1.0e-01  2.2e-02  8.68e-01   -2.641906266e+00  -2.542499069e+00  1.0e-01  0.00  \n3   1.1e-02  2.8e-03  7.4e-05  9.90e-01   -2.828991473e+00  -2.825523398e+00  2.8e-03  0.00  \n4   3.0e-07  7.6e-08  7.2e-12  1.01e+00   -2.828427258e+00  -2.828427157e+00  7.6e-08  0.00  \n5   3.8e-14  1.1e-14  1.0e-18  1.00e+00   -2.828427125e+00  -2.828427125e+00  1.1e-14  0.00  \nOptimizer terminated. Time: 0.00    \n\n","category":"page"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"Our computation matches with the theoretical prediction for maximally entangled bipartite state with 10^-6 absolute tolerance (Klep et al., 2022)!","category":"page"},{"location":"examples/generated/trace_poly/#Covariance-of-quantum-correlation","page":"Trace Polynomial","title":"Covariance of quantum correlation","text":"","category":"section"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"As introduced in Bell Inequalities example, we may also compute the covariance of quantum correlations while limiting the state to maximally entangled bipartite state.","category":"page"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"using NCTSSoS, MosekTools\nusing NCTSSoS.FastPolynomials:tr, Monomial\n\n@ncpolyvar x[1:3] y[1:3]\n\ncov(i, j) = tr(x[i] * y[j]) - tr(x[i]) * tr(y[j])\np = -1.0 * (cov(1, 1) + cov(1, 2) + cov(1, 3) + cov(2, 1) + cov(2, 2) - cov(2, 3) + cov(3, 1) - cov(3, 2))\ntpop = polyopt(p * one(Monomial); is_unipotent=true)\n\nsolver_config = SolverConfig(; optimizer=Mosek.Optimizer, order=2)\n\nresult = cs_nctssos(tpop, solver_config)\n\n@assert isapprox(result.objective,-5.0, atol = 1e-5)","category":"page"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"Problem\n  Name                   :                 \n  Objective sense        : maximize        \n  Type                   : CONIC (conic optimization problem)\n  Constraints            : 1010            \n  Affine conic cons.     : 0               \n  Disjunctive cons.      : 0               \n  Cones                  : 0               \n  Scalar variables       : 1               \n  Matrix variables       : 1 (scalarized: 6670)\n  Integer variables      : 0               \n\nOptimizer started.\nPresolve started.\nLinear dependency checker started.\nLinear dependency checker terminated.\nEliminator started.\nFreed constraints in eliminator : 0\nEliminator terminated.\nEliminator - tries                  : 1                 time                   : 0.00            \nLin. dep.  - tries                  : 1                 time                   : 0.00            \nLin. dep.  - primal attempts        : 1                 successes              : 1               \nLin. dep.  - dual attempts          : 0                 successes              : 0               \nLin. dep.  - primal deps.           : 0                 dual deps.             : 0               \nPresolve terminated. Time: 0.00    \nOptimizer  - threads                : 12              \nOptimizer  - solved problem         : the primal      \nOptimizer  - Constraints            : 1010            \nOptimizer  - Cones                  : 1               \nOptimizer  - Scalar variables       : 2                 conic                  : 2               \nOptimizer  - Semi-definite variables: 1                 scalarized             : 6670            \nFactor     - setup time             : 0.01            \nFactor     - dense det. time        : 0.00              GP order time          : 0.00            \nFactor     - nonzeros before factor : 5.11e+05          after factor           : 5.11e+05        \nFactor     - dense dim.             : 0                 flops                  : 4.38e+08        \nITE PFEAS    DFEAS    GFEAS    PRSTATUS   POBJ              DOBJ              MU       TIME  \n0   3.7e+01  1.0e+00  1.0e+00  0.00e+00   -0.000000000e+00  -0.000000000e+00  1.0e+00  0.01  \n1   1.0e+01  2.7e-01  1.1e-01  6.23e-01   -7.830053809e-01  -6.637260067e-01  2.7e-01  0.03  \n2   3.3e+00  9.0e-02  1.9e-02  1.90e+00   -2.817322144e+00  -2.794549298e+00  9.0e-02  0.05  \n3   7.5e-01  2.0e-02  2.0e-03  1.32e+00   -4.570370369e+00  -4.567256467e+00  2.0e-02  0.07  \n4   1.8e-02  4.8e-04  5.5e-06  1.11e+00   -4.990174678e+00  -4.990017169e+00  4.8e-04  0.09  \n5   2.6e-04  7.0e-06  9.4e-09  1.00e+00   -4.999850733e+00  -4.999848272e+00  7.0e-06  0.11  \n6   4.4e-07  1.2e-08  6.4e-13  1.00e+00   -4.999999751e+00  -4.999999747e+00  1.2e-08  0.13  \n7   5.6e-08  1.8e-09  2.6e-14  1.00e+00   -4.999999971e+00  -4.999999970e+00  1.4e-09  0.16  \n8   3.7e-10  4.0e-09  1.5e-17  1.00e+00   -5.000000000e+00  -5.000000000e+00  9.7e-12  0.21  \nOptimizer terminated. Time: 0.21    \n\n","category":"page"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"Again, the result matches the theoretical prediction for maximally entangled bipartite state with 10^-6 absolute tolerance (Klep et al., 2022)!","category":"page"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"","category":"page"},{"location":"examples/generated/trace_poly/","page":"Trace Polynomial","title":"Trace Polynomial","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/generated/bell/#bell-inequalities","page":"Bell inequalities","title":"Bell inequalities","text":"","category":"section"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"Bell inequalities are mathematical expressions that test whether the predictions of quantum mechanics can be explained by local hidden variable theories. They were first introduced by John Stewart Bell in 1964 and have since become fundamental tools in quantum information theory and quantum foundations. A Bell inequality is typically expressed as a linear combination of expectation values of observables, with bounds that differ between classical and quantum theories. In the classical case, these inequalities must be satisfied if the system can be described by local hidden variables. However, quantum mechanics can violate these inequalities, demonstrating the non-local nature of quantum correlations. The general form of a Bell inequality can be written as:","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"sum_ij c_ij langle A_i B_j rangle leq C","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"where A_i and B_j are observables measured by two parties (traditionally called Alice and Bob), c_ij are real coefficients, and C is the classical bound. Quantum mechanics can violate this inequality, with the maximum violation known as the quantum bound.","category":"page"},{"location":"examples/generated/bell/#Linear-Bell-inequalities","page":"Bell inequalities","title":"Linear Bell inequalities","text":"","category":"section"},{"location":"examples/generated/bell/#CHSH-inequality","page":"Bell inequalities","title":"CHSH inequality","text":"","category":"section"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"The most famous Bell inequality is the CHSH (Clauser-Horne-Shimony-Holt) inequality, which involves two parties, each measuring two observables. For unipotent (squared to 1) observables A_1 A_2 measured by Alice and B_1 B_2 measured by Bob. We define the objective function as:","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"f(A_1 A_2 B_1 B_2) = langle A_1B_1 rangle + langle A_1B_2 rangle + langle A_2B_1 rangle - langle A_2B_2 rangle","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"The CHSH inequality is then given by f(A_1 A_2 B_1 B_2) leq 2 which must be satisfied by any local hidden variable theory. However, quantum mechanics can violate this inequality up to the value 2sqrt2, known as Tsirelson's bound. This violation demonstrates that quantum mechanics cannot be described by any local hidden variable theory. The CHSH inequality is particularly important because it is the simplest non-trivial Bell inequality and has been experimentally verified numerous times, providing strong evidence for the non-local nature of quantum mechanics.","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"An upper bound on the maximal quantum violation of the CHSH inequality can be computed using the following code:","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"using NCTSSoS, MosekTools\n\n@ncpolyvar x[1:2]  # x = (A_1, A_2)\n@ncpolyvar y[1:2]  # y = (B_1, B_2)\nf = 1.0 * x[1] * y[1] + x[1] * y[2] + x[2] * y[1] - x[2] * y[2]  # objective function\n\npop = polyopt(             # optimization problem\n        f,\n        comm_gps=[x, y],   # commutative group\n        is_unipotent=true  # unipotent variables\n    )\n\nsolver_config = SolverConfig(optimizer=Mosek.Optimizer,  # solver backend\n    order=1                    # relaxation order\n)\nresult = cs_nctssos(pop, solver_config)\nresult.objective  # upper bound on the maximal quantum violation","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"-2.8284271321623207","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"The resulting upper bound is very close to the theoretical exact value 2sqrt2 approx 28284271247461903 (accurate up to 7 decimals!!).","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"Here, we first declare some operators as non-commutative variables, and then construct the optimization problem. In polyopt constructor,","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"comm_gps argument specifies the commutative group of the variables, which means that variables in different commutative groups commute with each other.\nis_unipotent argument specifies that the variables are unipotent, which means that they are squared to 1 (e.g. Pauli operators).","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"Here, since the variables on different qubits commute with each other, we can group them into different commutative groups.","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"In the solver configuration, we use Clarabel as the SDP solver backend. It is an open-source solver for conic programs with quadratic objectives, and it uses the interior-point method to solve the problem (Goulart and Chen, 2024).","category":"page"},{"location":"examples/generated/bell/#I_{3322}-inequality","page":"Bell inequalities","title":"I_3322 inequality","text":"","category":"section"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"The I_3322 inequality is a more complex inequality that involves two parties, each measuring three observables. Let A_1 A_2 A_3 be the projective (squared to itself) observables measured by Alice and B_1 B_2 B_3 be the projective observables measured by Bob. We define the objective function as (Pál and Vértesi, 2010):","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"f(A_1 A_2 A_3 B_1 B_2 B_3) = langle A_1(B_1+B_2+B_3) rangle + langle A_2(B_1+B_2-B_3) rangle\n+ langle A_3(B_1-B_2) rangle\n- langle A_1 rangle - 2langle B_1 rangle - langle B_2 rangle","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"In classical mechanics, the inequality f(A_1 A_2 A_3 B_1 B_2 B_3) leq 0 must be satisfied. However, quantum mechanics can violate this inequality up to the value 025. This violation demonstrates that quantum mechanics cannot be described by any local hidden variable theory.","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"An upper bound on the maximal quantum violation of the I_3322 inequality can be computed using the following code:","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"using NCTSSoS, MosekTools\n\n@ncpolyvar x[1:3]\n@ncpolyvar y[1:3]\nf = 1.0 * x[1] * (y[1] + y[2] + y[3]) + x[2] * (y[1] + y[2] - y[3]) +\n    x[3] * (y[1] - y[2]) - x[1] - 2 * y[1] - y[2]\n\npop = polyopt(-f, comm_gps= [x, y], is_projective=true)\n\nsolver_config = SolverConfig(optimizer=Mosek.Optimizer, order=2)\n\nresult = cs_nctssos(pop, solver_config)\nresult.objective","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"-0.25093972222115607","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"Here, the is_projective argument specifies that the variables are projective, which means they are squared to themselves (e.g. 0ranglelangle 0 and 1ranglelangle 1).","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"The resulting upper bound is close to the theoretically exact value 025. By increasing the relaxation order, this upper bound could be further improved.","category":"page"},{"location":"examples/generated/bell/#Reducing-the-SDP-Size-by-exploiting-sparsity","page":"Bell inequalities","title":"Reducing the SDP Size by exploiting sparsity","text":"","category":"section"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"To reach the theoretically exact value 025, one may increase the relaxation order (Magron and Wang, 2023).","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"using NCTSSoS, MosekTools\n\n@ncpolyvar x[1:3]\n@ncpolyvar y[1:3]\nf = 1.0 * x[1] * (y[1] + y[2] + y[3]) + x[2] * (y[1] + y[2] - y[3]) +\n    x[3] * (y[1] - y[2]) - x[1] - 2 * y[1] - y[2]\n\npop = polyopt(-f, comm_gps= [x, y], is_projective=true)\n\nsolver_config = SolverConfig(optimizer=Mosek.Optimizer, order=3)\n\n@time result = cs_nctssos(pop, solver_config)\n@show result.objective","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"-0.25087555008536233","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"Indeed, by increasing the relaxation order to 3, we have improved the upper bound from -025093972222278366 to -02508755502587585.","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"However, keep increasing the order leads to large-scale SDPs that are computationally expensive. To reduce the SDP size, we may exploit the sparsity of the problem (Magron and Wang, 2023). There are two types of sparsities:","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"Correlative Sparsity: exploiting the fact that few variable products appear in the objective function. Therefore, we could break down the objective function into smaller parts, each involving fewer variables. This reduces the matrix size and the number of constraints of the SDP, making it more tractable.\nTerm Sparsity: exploiting the fact that few monomials appear in the objective function. By identifying and removing unnecessary monomials, we can further reduce the matrix size and the number of constraints of the SDP.","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"To take advantage of these sparsity patterns:","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"using NCTSSoS, MosekTools\n\n@ncpolyvar x[1:3]\n@ncpolyvar y[1:3]\nf = 1.0 * x[1] * (y[1] + y[2] + y[3]) + x[2] * (y[1] + y[2] - y[3]) +\n    x[3] * (y[1] - y[2]) - x[1] - 2 * y[1] - y[2]\n\npop = polyopt(-f, comm_gps= [x, y], is_projective=true)\n\nsolver_config = SolverConfig(optimizer=Mosek.Optimizer, order=6, cs_algo=MF())\n\n@time result = cs_nctssos(pop, solver_config)\nresult.objective","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"-0.2508744934134293","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"Using almost half of the time, we are able to improve the 7-th digit of the upper bound!","category":"page"},{"location":"examples/generated/bell/#Nonlinear-Bell-Inequalities","page":"Bell inequalities","title":"Nonlinear Bell Inequalities","text":"","category":"section"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"Nonlinear Bell inequalities are extensions of the standard linear Bell inequalities. Instead of being linear combinations of expectation values, they involve polynomial functions of these expectation values. These inequalities arise naturally when considering more complex scenarios, such as multi-party settings or when the parties can perform sequences of measurements.","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"The significance of nonlinear Bell inequalities in quantum information lies in their ability to detect non-locality in situations where linear inequalities might fail. They can provide tighter bounds on classical correlations and reveal quantum non-locality in a broader range of experimental setups. Furthermore, studying nonlinear Bell inequalities helps in understanding the structure of quantum correlations and the boundary between classical and quantum physics more deeply. They are also relevant in the context of quantum cryptography and communication complexity, where understanding the limits of classical and quantum correlations is crucial.","category":"page"},{"location":"examples/generated/bell/#Covariance-Bell-Inequality","page":"Bell inequalities","title":"Covariance Bell Inequality","text":"","category":"section"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"The covariance Bell inequality is a nonlinear Bell inequality that involves the covariance of measurements. It can be expressed as:","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"textCov(A B) = langle A B rangle - langle A rangle langle B rangle","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"where A and B are observables measured by two parties. The covariance Bell inequality is nonlinear because it involves the product of expectation values of two observables.","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"Let us define the objective function as:","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"f(A_1A_2A_3 B_1B_2B_3) = textCov(A_1 B_1) + textCov(A_1 B_2) + textCov(A_1B_3)  +  textCov(A_2 B_1) + textCov(A_2 B_2) - textCov(A_2 B_3) + textCov(A_3 B_1) - textCov(A_3B_2)","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"It was shown that f(A_1A_2A_3B_1B_2B_3) leq frac92 in classical models, while it attains the quantum violation 5 with a maximally entangled state in a spatial quantum model (Pozsgay et al., 2017).","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"An open question is: what is the maximal quantum violation that the covariance Bell inequality can attain in spatial quantum models. We can tackle this question using state polynomial optimization (Klep et al., 2024).","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"using NCTSSoS, MosekTools, NCTSSoS.FastPolynomials\n\n@ncpolyvar x[1:3] y[1:3]  # x = (A_1, A_2, A_3), y = (B_1, B_2, B_3)","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"(NCTSSoS.FastPolynomials.Variable[x₁, x₂, x₃], NCTSSoS.FastPolynomials.Variable[y₁, y₂, y₃])","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"covariance function","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"cov(a, b) = 1.0 * ς(x[a] * y[b]) * one(Monomial) -\n            1.0 * ς(x[a]) * ς(y[b]) * one(Monomial)","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"cov (generic function with 1 method)","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"objective function","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"sp = cov(1,1) + cov(1,2) + cov(1,3) + cov(2,1) + cov(2,2) - cov(2,3) + cov(3,1) - cov(3,2)\n\n\nspop = polyopt(\n        sp,\n        is_unipotent=true,\n        comm_gps=[x[1:3], y[1:3]]\n        )\n\nsolver_config = SolverConfig(\n    optimizer=Mosek.Optimizer,          # solver backend\n    order=2                             # relaxation order\n)\n\nresult = cs_nctssos(spop, solver_config)\nresult.objective","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"-5.0002715409977965","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"note: Typing Unicodes\nYou can type the unicode characters in the code by using \\varsigma and pressing Tab to get the unicode character ς.","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"-5.000271541108556","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"The resulting upper bound is very close to the previously known best value 5 (accurate up to 3 decimals!!).","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"We can use sparsity to further improve the bound.","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"using NCTSSoS, MosekTools, NCTSSoS.FastPolynomials\n\n@ncpolyvar x[1:3] y[1:3]  # x = (A_1, A_2, A_3), y = (B_1, B_2, B_3)","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"(NCTSSoS.FastPolynomials.Variable[x₁, x₂, x₃], NCTSSoS.FastPolynomials.Variable[y₁, y₂, y₃])","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"covariance function","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"cov(a, b) = 1.0 * ς(x[a] * y[b]) * one(Monomial) -\n            1.0 * ς(x[a]) * ς(y[b]) * one(Monomial)","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"cov (generic function with 1 method)","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"objective function","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"sp = cov(1,1) + cov(1,2) + cov(1,3) + cov(2,1) + cov(2,2) - cov(2,3) + cov(3,1) - cov(3,2)\n\n\nspop = polyopt(\n        sp,\n        is_unipotent=true,\n        comm_gps=[x[1:3], y[1:3]]\n        )\n\nsolver_config = SolverConfig(\n    optimizer=Mosek.Optimizer,\n    order=3,\n    ts_algo=MF()\n)\n\nresult = cs_nctssos(spop, solver_config)\n\nresult_higher = cs_nctssos_higher(spop, result, solver_config)\nresult_higher.objective","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"-5.000454113653677","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"-4.999999981821947","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"This is accurate up to 10 decimals.","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"","category":"page"},{"location":"examples/generated/bell/","page":"Bell inequalities","title":"Bell inequalities","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/sdp_relaxation/#semidefinite-programming","page":"SDP Relaxation","title":"Semidefinite Programming","text":"","category":"section"},{"location":"manual/sdp_relaxation/","page":"SDP Relaxation","title":"SDP Relaxation","text":"Semidefinite Programming (SDP) is a powerful optimization technique that can be used to solve a wide variety of problems in science and engineering, including many problems in quantum physics (Vandenberghe and Boyd, 1996). It is a generalization of linear programming, where instead of optimizing a linear function over a set of linear inequalities, we optimize a linear function over a set of \"semidefinite\" constraints.","category":"page"},{"location":"manual/sdp_relaxation/","page":"SDP Relaxation","title":"SDP Relaxation","text":"A semidefinite constraint is a condition on a matrix to be \"positive semidefinite\". A matrix is positive semidefinite if it is symmetric and all its eigenvalues are non-negative. This condition is a generalization of the concept of a non-negative number to matrices.","category":"page"},{"location":"manual/sdp_relaxation/","page":"SDP Relaxation","title":"SDP Relaxation","text":"SDP is particularly useful for problems involving sums of squares of polynomials, like the one we discussed in the previous section. This is because the condition that a polynomial is a sum of squares can be expressed as a semidefinite constraint. This allows us to use powerful numerical algorithms to solve these problems.","category":"page"},{"location":"manual/sdp_relaxation/#moment-sohs-hierarchy","page":"SDP Relaxation","title":"Moment Sum-of-Hermitian-Square Hierarchy","text":"","category":"section"},{"location":"manual/sdp_relaxation/","page":"SDP Relaxation","title":"SDP Relaxation","text":"The \"Moment Sum-of-Hermitian-Square Hierarchy\" is a powerful technique for approximating the solution to polynomial optimization problems (Lasserre, 2010). The solution is approximated by a sequence of easier problems. Each problem in the sequence is a semidefinite program, which can be solved efficiently.","category":"page"},{"location":"manual/sdp_relaxation/","page":"SDP Relaxation","title":"SDP Relaxation","text":"The basic idea is to relax the original problem by considering \"moments\" of the variables. The moments are related to the average values of the powers of the variables. In quantum physics, these moments are related to the expectation values of the powers of the operators. The constraints on the moments can be expressed as semidefinite constraints. By adding more and more moments, we get a tighter and tighter relaxation of the original problem, and the solution to the relaxed problem gets closer and closer to the solution of the original problem.","category":"page"},{"location":"manual/sdp_relaxation/","page":"SDP Relaxation","title":"SDP Relaxation","text":"This technique has been applied to many problems in quantum information theory, such as calculating the ground state energy of a quantum system or determining whether a quantum state is entangled.","category":"page"},{"location":"manual/sdp_relaxation/#moment-problem","page":"SDP Relaxation","title":"Moment Problem","text":"","category":"section"},{"location":"manual/sdp_relaxation/","page":"SDP Relaxation","title":"SDP Relaxation","text":"In physics, the \"moment problem\" is a classic mathematical puzzle that has surprising connections to quantum mechanics. Imagine you have a physical system, like a particle, and you can measure certain properties of that system, like its position or momentum. The results of these measurements will have a certain statistical distribution. The \"moments\" of this distribution are the average values of the powers of the measured quantity. For example, the first moment is the average value, the second moment is related to the variance (how spread out the values are), and so on.","category":"page"},{"location":"manual/sdp_relaxation/","page":"SDP Relaxation","title":"SDP Relaxation","text":"The moment problem asks the following question: if you know all the moments of a distribution, can you uniquely determine the distribution itself? In other words, if you know all the average values of the powers of a physical quantity, do you know everything there is to know about the probability of measuring a certain value?","category":"page"},{"location":"manual/sdp_relaxation/","page":"SDP Relaxation","title":"SDP Relaxation","text":"It turns out that the answer is not always yes. There are cases where different distributions can have the same set of moments. This has important implications in quantum mechanics, where the state of a system is described by a wave function, which is related to a probability distribution. The moment problem helps us understand what information is needed to fully characterize a quantum state.","category":"page"},{"location":"manual/sdp_relaxation/#sohs-problem","page":"SDP Relaxation","title":"Sum-of-Hermitian-Square Problem","text":"","category":"section"},{"location":"manual/sdp_relaxation/","page":"SDP Relaxation","title":"SDP Relaxation","text":"The \"Sum-of-Hermitian-Square Problem\" is a mathematical problem that arises in quantum information theory and quantum computing. In this context, we are often interested in optimizing certain quantities that are described by polynomials in non-commuting variables. These variables represent physical observables that do not commute with each other, like position and momentum in quantum mechanics.","category":"page"},{"location":"manual/sdp_relaxation/","page":"SDP Relaxation","title":"SDP Relaxation","text":"A key question is to determine whether a given polynomial is always non-negative. One way to prove that a polynomial is non-negative is to show that it can be written as a sum of squares of other polynomials. In the case of non-commuting variables, we consider sums of \"Hermitian squares\". A Hermitian square is a product of a polynomial and its \"Hermitian conjugate\", which is a generalization of the complex conjugate for matrices.","category":"page"},{"location":"manual/sdp_relaxation/","page":"SDP Relaxation","title":"SDP Relaxation","text":"The paper Sums of hermitian squares and the BMV conjecture by Igor Klep and Markus Schweighofer, explores the connection between this problem and the Bessis-Moussa-Villani (BMV) conjecture, a famous open problem in mathematical physics. The authors use techniques from semidefinite programming to make progress on this conjecture.","category":"page"},{"location":"quick_start/#quick-start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"The non-commutative Broyden banded function is a generalization of the classical Broyden banded function to non-commuting variables. It is often used in optimization and numerical analysis to test the performance of algorithms. We will use it as an example.","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"The function is defined as:","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"f(x_1 dots x_n) = sum_i=1^n f_i(x_1 dots x_n)^2","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"where","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"f_i(x_1 dots x_n) = 2x_i + 5x_i^3 + 1 - sum_j in J_i (x_j +x_j)^2","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"with","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"J_i = j  j neq i max(1 i-5) leq j leq min(n i+1)","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"The variables x_i are non-commuting. You may think of them as matrices or operators that is assigned with a representation. It's possible puts constraints on the variables in the form of polynomials of equalities and inequalities. For example, we may require","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"1 - x_i^2 geq 0 quad textand quad x_i - frac13 geq 0 quad forall i in 1n","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"Firstly, use NCTSSoS.PolyOpt object to represent this problem. Since the constraints are inequalities, we pass it to ineq_constraints argument to constructor NCTSSoS.polyopt.","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"using NCTSSoS, MosekTools\n\nfunction broyden_banded(n::Int)\n\t@ncpolyvar x[1:n]\n\tf = 0.\n\tfor i = 1:n\n\t    jset = max(1, i-5) : min(n, i+1)\n\t    jset = setdiff(jset, i)\n\t    g = sum(x[j] + x[j]^2 for j in jset)\n\t    f += (2*x[i] + 5*x[i]^3 + 1 - g)^2\n\tend\n\tineq_cons = [[1 - x[i]^2 for i in 1:n];[x[i] - 1/3 for i in 1:n]]\n\n\treturn polyopt(f; ineq_constraints=ineq_cons)\nend\n\npop = broyden_banded(6)","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"obj:\n\n    6.0 * 1 + -6.0 * x₁¹ + -6.0 * x₂¹ + -4.0 * x₃¹ + -2.0 * x₄¹ + 2.0 * x₆¹ + 2.0 * x₁¹x₃¹ + 1.0 * x₁¹x₄¹ + -1.0 * x₁¹x₆¹ + -1.0 * x₁² + -1.0 * x₂¹x₃¹ + 1.0 * x₂¹x₄¹ + -1.0 * x₂¹x₆¹ + -1.0 * x₂² + 2.0 * x₃¹x₁¹ + -1.0 * x₃¹x₂¹ + -2.0 * x₃¹x₄¹ + -1.0 * x₃¹x₆¹ + 1.0 * x₄¹x₁¹ + 1.0 * x₄¹x₂¹ + -2.0 * x₄¹x₃¹ + -3.0 * x₄¹x₅¹ + -1.0 * x₄¹x₆¹ + 1.0 * x₄² + -3.0 * x₅¹x₄¹ + -4.0 * x₅¹x₆¹ + 2.0 * x₅² + -1.0 * x₆¹x₁¹ + -1.0 * x₆¹x₂¹ + -1.0 * x₆¹x₃¹ + -1.0 * x₆¹x₄¹ + -4.0 * x₆¹x₅¹ + 3.0 * x₆² + 2.0 * x₁¹x₂² + 4.0 * x₁¹x₃² + 3.0 * x₁¹x₄² + 2.0 * x₁¹x₅² + 1.0 * x₁¹x₆² + 2.0 * x₁²x₂¹ + 2.0 * x₁²x₃¹ + 1.0 * x₁²x₄¹ + -1.0 * x₁²x₆¹ + 20.0 * x₁³ + 2.0 * x₂¹x₁² + 1.0 * x₂¹x₃² + 3.0 * x₂¹x₄² + 2.0 * x₂¹x₅² + 1.0 * x₂¹x₆² + 2.0 * x₂²x₁¹ + 1.0 * x₂²x₃¹ + 1.0 * x₂²x₄¹ + -1.0 * x₂²x₆¹ + 20.0 * x₂³ + 2.0 * x₃¹x₁² + 1.0 * x₃¹x₂² + 2.0 * x₃¹x₅² + 1.0 * x₃¹x₆² + 4.0 * x₃²x₁¹ + 1.0 * x₃²x₂¹ + -1.0 * x₃²x₆¹ + 18.0 * x₃³ + 1.0 * x₄¹x₁² + 1.0 * x₄¹x₂² + -1.0 * x₄¹x₅² + 1.0 * x₄¹x₆² + 3.0 * x₄²x₁¹ + 3.0 * x₄²x₂¹ + -1.0 * x₄²x₅¹ + -1.0 * x₄²x₆¹ + 16.0 * x₄³ + -1.0 * x₅¹x₄² + -2.0 * x₅¹x₆² + 2.0 * x₅²x₁¹ + 2.0 * x₅²x₂¹ + 2.0 * x₅²x₃¹ + -1.0 * x₅²x₄¹ + -2.0 * x₅²x₆¹ + 14.0 * x₅³ + -1.0 * x₆¹x₁² + -1.0 * x₆¹x₂² + -1.0 * x₆¹x₃² + -1.0 * x₆¹x₄² + -2.0 * x₆¹x₅² + 1.0 * x₆²x₁¹ + 1.0 * x₆²x₂¹ + 1.0 * x₆²x₃¹ + 1.0 * x₆²x₄¹ + -2.0 * x₆²x₅¹ + 12.0 * x₆³ + -5.0 * x₁¹x₂³ + -5.0 * x₁¹x₃³ + -5.0 * x₁¹x₄³ + -5.0 * x₁¹x₅³ + -5.0 * x₁¹x₆³ + 4.0 * x₁²x₂² + 4.0 * x₁²x₃² + 3.0 * x₁²x₄² + 2.0 * x₁²x₅² + 1.0 * x₁²x₆² + -5.0 * x₁³x₂¹ + 25.0 * x₁⁴ + -5.0 * x₂¹x₁³ + -5.0 * x₂¹x₃³ + -5.0 * x₂¹x₄³ + -5.0 * x₂¹x₅³ + -5.0 * x₂¹x₆³ + 4.0 * x₂²x₁² + 3.0 * x₂²x₃² + 3.0 * x₂²x₄² + 2.0 * x₂²x₅² + 1.0 * x₂²x₆² + -5.0 * x₂³x₁¹ + -5.0 * x₂³x₃¹ + 25.0 * x₂⁴ + -5.0 * x₃¹x₂³ + -5.0 * x₃¹x₄³ + -5.0 * x₃¹x₅³ + -5.0 * x₃¹x₆³ + 4.0 * x₃²x₁² + 3.0 * x₃²x₂² + 2.0 * x₃²x₄² + 2.0 * x₃²x₅² + 1.0 * x₃²x₆² + -5.0 * x₃³x₁¹ + -5.0 * x₃³x₂¹ + -5.0 * x₃³x₄¹ + 24.0 * x₃⁴ + -5.0 * x₄¹x₃³ + -5.0 * x₄¹x₅³ + -5.0 * x₄¹x₆³ + 3.0 * x₄²x₁² + 3.0 * x₄²x₂² + 2.0 * x₄²x₃² + 1.0 * x₄²x₅² + 1.0 * x₄²x₆² + -5.0 * x₄³x₁¹ + -5.0 * x₄³x₂¹ + -5.0 * x₄³x₃¹ + -5.0 * x₄³x₅¹ + 23.0 * x₄⁴ + -5.0 * x₅¹x₄³ + -5.0 * x₅¹x₆³ + 2.0 * x₅²x₁² + 2.0 * x₅²x₂² + 2.0 * x₅²x₃² + 1.0 * x₅²x₄² + -5.0 * x₅³x₁¹ + -5.0 * x₅³x₂¹ + -5.0 * x₅³x₃¹ + -5.0 * x₅³x₄¹ + -5.0 * x₅³x₆¹ + 22.0 * x₅⁴ + -5.0 * x₆¹x₅³ + 1.0 * x₆²x₁² + 1.0 * x₆²x₂² + 1.0 * x₆²x₃² + 1.0 * x₆²x₄² + -5.0 * x₆³x₁¹ + -5.0 * x₆³x₂¹ + -5.0 * x₆³x₃¹ + -5.0 * x₆³x₄¹ + -5.0 * x₆³x₅¹ + 21.0 * x₆⁴ + -5.0 * x₁²x₂³ + -5.0 * x₁²x₃³ + -5.0 * x₁²x₄³ + -5.0 * x₁²x₅³ + -5.0 * x₁²x₆³ + -5.0 * x₁³x₂² + -5.0 * x₂²x₁³ + -5.0 * x₂²x₃³ + -5.0 * x₂²x₄³ + -5.0 * x₂²x₅³ + -5.0 * x₂²x₆³ + -5.0 * x₂³x₁² + -5.0 * x₂³x₃² + -5.0 * x₃²x₂³ + -5.0 * x₃²x₄³ + -5.0 * x₃²x₅³ + -5.0 * x₃²x₆³ + -5.0 * x₃³x₁² + -5.0 * x₃³x₂² + -5.0 * x₃³x₄² + -5.0 * x₄²x₃³ + -5.0 * x₄²x₅³ + -5.0 * x₄²x₆³ + -5.0 * x₄³x₁² + -5.0 * x₄³x₂² + -5.0 * x₄³x₃² + -5.0 * x₄³x₅² + -5.0 * x₅²x₄³ + -5.0 * x₅²x₆³ + -5.0 * x₅³x₁² + -5.0 * x₅³x₂² + -5.0 * x₅³x₃² + -5.0 * x₅³x₄² + -5.0 * x₅³x₆² + -5.0 * x₆²x₅³ + -5.0 * x₆³x₁² + -5.0 * x₆³x₂² + -5.0 * x₆³x₃² + -5.0 * x₆³x₄² + -5.0 * x₆³x₅² + 25.0 * x₁⁶ + 25.0 * x₂⁶ + 25.0 * x₃⁶ + 25.0 * x₄⁶ + 25.0 * x₅⁶ + 25.0 * x₆⁶\n\nconstraints:\n\n\n    1.0 * 1 + -1.0 * x₁² >= 0\n    1.0 * 1 + -1.0 * x₂² >= 0\n    1.0 * 1 + -1.0 * x₃² >= 0\n    1.0 * 1 + -1.0 * x₄² >= 0\n    1.0 * 1 + -1.0 * x₅² >= 0\n    1.0 * 1 + -1.0 * x₆² >= 0\n    -0.3333333333333333 * 1 + 1.0 * x₁¹ >= 0\n    -0.3333333333333333 * 1 + 1.0 * x₂¹ >= 0\n    -0.3333333333333333 * 1 + 1.0 * x₃¹ >= 0\n    -0.3333333333333333 * 1 + 1.0 * x₄¹ >= 0\n    -0.3333333333333333 * 1 + 1.0 * x₅¹ >= 0\n    -0.3333333333333333 * 1 + 1.0 * x₆¹ >= 0\n\nvariables:\n    x₁ x₂ x₃ x₄ x₅ x₆\n\nis_unipotent:\n    false\n\nis_projective:\n    false","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"Polynomial Optimization is NP-hard, therefore it is considered impossible to solve them efficiently in general. However, it is possible to relax the problem into Semidefinite Programming. The solution of the Semidefinite program will be the lower/upper bound of the original minimization/maximization polynomial optimziation problem.","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"The relaxation can be done in two different forms, moment relaxation and sum of hermitian square relaxation. The relaxation is tight in the limit of a parameter, moment order, reaching infinity. However, you may get lucky and be able to sovle the problem at finite moment order.","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"Information about the relaxation is encoded in NCTSSoS.SolverConfig. Besides moment order, it also needs to be provided with a SDP Solver. Different optimizers may have different performance characteristics and may be more or less suitable for a given problem.","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"solver_config = SolverConfig(optimizer=Mosek.Optimizer;order=3)","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"Finally, we are ready to solve this problem. This is accomplishded with NCTSSoS.cs_nctssos.","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"@time result = cs_nctssos(pop, solver_config)\n\n@assert isapprox(result.objective, 2.979657980133734; atol=1e-5) # find correct value","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"131.787849 seconds (80.18 M allocations: 4.424 GiB, 0.67% gc time, 4.86% compilation time)\nObjective: 2.979657977586228","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"Although we have reached a tight bound, time to solve the problem can still be significant. As a remedy, Sparsities can be utilized to reduce the problem size. This is achieved by supplying an EliminationAlgorithm to NCTSSoS.SolverConfig.","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"solver_config = SolverConfig(optimizer=Mosek.Optimizer; order=3, cs_algo=MF(), ts_algo=MMD())\n\n@time result_ts_cs = cs_nctssos(pop, solver_config)\n\n@assert result_ts_cs.objective <= result.objective","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"1.761473 seconds (46.53 M allocations: 1.740 GiB, 13.13% gc time, 9.54% compilation time)\nObjective: 2.979657981888441","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"As expected, the time taken to solve the problem has been significantly reduced. However, the result may no longer be a tight lower bound. Sparsity is itself a kind of relaxation. Luckily, we may tighten the relaxation in the Term Sparsity sense, this is done with NCTSSoS.cs_nctssos_higher.","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"@time result_higher = cs_nctssos_higher(pop, result_ts_cs, solver_config)\n\n@assert result_higher.objective ≈ result.objective atol=1e-5","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"14.902031 seconds (444.36 M allocations: 15.470 GiB, 8.69% gc time, 0.46% compilation time)\nObjective: 2.9796579998271047","category":"page"},{"location":"quick_start/#Workflow","page":"Quick Start","title":"Workflow","text":"","category":"section"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"To summarize, the workflow for solving polynomial optimization can be summarized as","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"(Image: `Workflow for solving Polynomial Optimization problem`)","category":"page"},{"location":"quick_start/","page":"Quick Start","title":"Quick Start","text":"If you would like to understand more please refer to examples section in the document.","category":"page"},{"location":"manual/optimizers/#overview-of-optimizers","page":"Optimizers","title":"Overview of Optimizer","text":"","category":"section"},{"location":"manual/optimizers/","page":"Optimizers","title":"Optimizers","text":"A brief overview of different Semideinite Program optimizers are provided below.","category":"page"},{"location":"manual/optimizers/#mosek","page":"Optimizers","title":"Mosek","text":"","category":"section"},{"location":"manual/optimizers/","page":"Optimizers","title":"Optimizers","text":"Mosek (ApS, 2025) is a high-performance commercial solver for convex optimization problems, including linear, conic, and semidefinite programming. It is known for its speed and reliability, making it a popular choice for academic and industrial applications. While it is a closed-source product, it offers free licenses for academic use.","category":"page"},{"location":"manual/optimizers/","page":"Optimizers","title":"Optimizers","text":"using MosekTools\nSolverConfig(optimizer=Mosek.Optimizer) # using Mosek as the optimizer","category":"page"},{"location":"manual/optimizers/#clarabel","page":"Optimizers","title":"Clarabel","text":"","category":"section"},{"location":"manual/optimizers/","page":"Optimizers","title":"Optimizers","text":"Clarabel (Goulart and Chen, 2024) is a modern, open-source interior-point solver for convex optimization. It is written in Rust and Julia and is designed to be fast, reliable, and easy to use. It has a growing community of users and developers and is a promising alternative to commercial solvers like Mosek. For performance, you may need to install closed-source linear system solvers.","category":"page"},{"location":"manual/optimizers/","page":"Optimizers","title":"Optimizers","text":"using Clarabel\nSolverConfig(optimizer=Clarabel.Optimizer) # using Mosek as the optimizer","category":"page"},{"location":"manual/optimizers/#cosmo","page":"Optimizers","title":"COSMO","text":"","category":"section"},{"location":"manual/optimizers/","page":"Optimizers","title":"Optimizers","text":"COSMO (Garstka et al., 2021) (Conic Operator Splitting Method) is a first-order solver for convex conic optimization problems. It is based on the alternating direction method of multipliers (ADMM) and is designed to be fast and scalable, especially for large-scale problems. However, it may not be as accurate as interior-point methods like Mosek and Clarabel.","category":"page"},{"location":"manual/optimizers/","page":"Optimizers","title":"Optimizers","text":"using COSMO\nSolverConfig(optimizer=COSMO.Optimizer) # using COSMO as the optimizer","category":"page"},{"location":"examples/generated/ground_state_energy/#Obtaining-Ground-State-Energy-Lower-Bound","page":"Ground State Energy","title":"Obtaining Ground State Energy Lower Bound","text":"","category":"section"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"Finding the ground state of a quantum system is a fundamental problem in quantum mechanics (Wang et al., 2024). Variational methods are commonly used to approximate the ground state. Due to the variational nature of these methods, only an upper bound can be obtained (Kull et al., 2024). Polynomial optimization techniques provides a way to find the lower bound of the ground state energy.","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"In general, we consider the following Hamiltonian:","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"H = frac14 sum_i u003c j J_ij sum_ a in xyz sigma_i^a sigma_j^a","category":"page"},{"location":"examples/generated/ground_state_energy/#1D-Heisenberg-Model-with-Nearest-Neighbor-Interaction","page":"Ground State Energy","title":"1D Heisenberg Model with Nearest Neighbor Interaction","text":"","category":"section"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"Firstly, let's consider the simplest case of 1D Heisenberg chain with nearest neighbor interaction and periodic boundary condition.","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"using NCTSSoS, MosekTools\nN = 6\n@ncpolyvar x[1:N] y[1:N] z[1:N]\n\nham = sum(ComplexF64(1 / 4) * op[i] * op[mod1(i + 1, N)] for op in [x, y, z] for i in 1:N)\n\neq_cons = reduce(vcat, [[x[i] * y[i] - im * z[i], y[i] * x[i] + im * z[i], y[i] * z[i] - im * x[i], z[i] * y[i] + im * x[i], z[i] * x[i] - im * y[i], x[i] * z[i] + im * y[i]] for i in 1:N])\n\npop = cpolyopt(\n            ham;                                        # the Hamiltonian\n            eq_constraints=eq_cons,                     # anti-commutation relation between Pauli Operators\n            comm_gps=[[x[i], y[i], z[i]] for i in 1:N], # commutation relation between Pauli Operators\n            is_unipotent=true                           # Pauli operators square to identity\n            )\n\nsolver_config = SolverConfig(\n                    optimizer=Mosek.Optimizer,          # the solver backend\n                    order=2,                        # moment matrix order\n                    ts_algo = MMD(),                    # term sparsity algorithm\n                    )\n\nres = cs_nctssos(pop, solver_config)\n\nres = cs_nctssos_higher(\n            pop,                                        # Polynomial Optimization Problem\n            res,                                        # Solution of First Order Term Sparsity Iteration\n            solver_config                               # Solver Configuration\n        )\nres.objective / N","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"-0.4671292729371477","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"The returned result matches the actual ground state energy -0467129 to 6 digits. (Wang et al., 2024)","category":"page"},{"location":"examples/generated/ground_state_energy/#1D-Heisenberg-Model-with-next-nearest-neighbor-interaction","page":"Ground State Energy","title":"1D Heisenberg Model with next nearest neighbor interaction","text":"","category":"section"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"Polynomial Optimization framework is quite general. Almost no modification is required to handle more complex Hamiltonian. 1D Heisenberg Model with geometric frustration induced by next nearest neighbor interaction can be solved as:","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"using NCTSSoS, MosekTools\nN = 6\nJ1 = 1.0                            # Nearest Neighbor Interaction\nJ2 = 0.2                            # Next Nearest Neighbor Interaction\n@ncpolyvar x[1:N] y[1:N] z[1:N]\n\nham = sum(ComplexF64(J1 / 4) * op[i] * op[mod1(i + 1, N)] + ComplexF64(J2 / 4) * op[i] * op[mod1(i + 2, N)] for op in [x, y, z] for i in 1:N)\n\neq_cons = reduce(vcat, [[x[i] * y[i] - im * z[i], y[i] * x[i] + im * z[i], y[i] * z[i] - im * x[i], z[i] * y[i] + im * x[i], z[i] * x[i] - im * y[i], x[i] * z[i] + im * y[i]] for i in 1:N])\n\npop = cpolyopt(ham; eq_constraints=eq_cons, comm_gps=[[x[i], y[i], z[i]] for i in 1:N], is_unipotent=true)\n\nsolver_config = SolverConfig(optimizer=Mosek.Optimizer, order=2, ts_algo = MMD())\n\nres = cs_nctssos(pop, solver_config)\n\nres = cs_nctssos_higher(pop,res,solver_config)\nres.objective/N","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"-0.4270083216637759","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"We are able to obtain the ground state energy of -04270083225302217, accurate to 6 digits!","category":"page"},{"location":"examples/generated/ground_state_energy/#2D-Square-Lattice","page":"Ground State Energy","title":"2D Square Lattice","text":"","category":"section"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"Extending Heisenberg model to 2-D case is also straightforward. However NCTSSoS.jl is not efficient enough to handle system at this size.","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"using NCTSSoS, MosekTools Nx = 3 Ny = 3 N = Nx * Ny J1 = 1.0 J2 = 0.0 @ncpolyvar x[1:N] y[1:N] z[1:N]","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"LI = LinearIndices((1:Nx, 1:Ny))","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"ham = sum(ComplexF64(J1 / 4) * op[LI[CartesianIndex(i, j)]] * op[LI[CartesianIndex(i, mod1(j + 1, Ny))]] + ComplexF64(J1 / 4) * op[LI[CartesianIndex(i, j)]] * op[LI[CartesianIndex(mod1(i + 1, Nx), j)]] + ComplexF64(J2 / 4) * op[LI[CartesianIndex(i, j)]] * op[LI[CartesianIndex(mod1(i + 1, Nx), mod1(j + 1, Ny))]] + ComplexF64(J2 / 4) * op[LI[CartesianIndex(i, j)]] * op[LI[CartesianIndex(mod1(i + 1, Nx), mod1(j - 1, Ny))]] for op in [x, y, z] for i in 1:Nx for j in 1:Ny)","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"eq_cons = reduce(vcat, [[x[i] * y[i] - im * z[i], y[i] * x[i] + im * z[i], y[i] * z[i] - im * x[i], z[i] * y[i] + im * x[i], z[i] * x[i] - im * y[i], x[i] * z[i] + im * y[i]] for i in 1:N])","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"pop = cpolyopt(ham; eqconstraints=eqcons, commgps=[[x[i], y[i], z[i]] for i in 1:N], isunipotent=true)","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"solverconfig = SolverConfig(optimizer=Mosek.Optimizer, order=3, csalgo=MF(), ts_algo=MMD())","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"res = csnctssos(pop, solverconfig)","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"res = csnctssoshigher(pop,res,solver_config)","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"res.objective / N","category":"page"},{"location":"examples/generated/ground_state_energy/#Next-step","page":"Ground State Energy","title":"Next step","text":"","category":"section"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"With such lower bounds, estimates of properties of the ground state, correlations functions, structure factors and order parameters, can also be obtained. We provide examples in another section.","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"","category":"page"},{"location":"examples/generated/ground_state_energy/","page":"Ground State Energy","title":"Ground State Energy","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/generated/certify_ground_state_property/#certify-property","page":"Certifying Ground State Property","title":"Certifying Ground State Properties","text":"","category":"section"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"Understanding ground-state properties of quantum many-body systems represents a fundamental challenge in quantum physics (Wang et al., 2024). These properties reveal the low-energy phases and quantum correlations that characterize complex quantum systems. However, computing them exactly becomes intractable for large systems due to the exponential growth of the Hilbert space dimension with particle number.","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"While exact diagonalization provides precise results for small systems, it quickly becomes computationally prohibitive. Instead, we can obtain rigorous bounds on ground-state properties by combining:","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"Upper bounds from variational methods (or exact diagonalization for small systems)\nLower bounds from semidefinite programming (SDP) relaxations","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"This approach provides certified intervals that guarantee the true ground-state property lies within computable bounds.","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"As a demonstration, we consider the quantum Heisenberg model:","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"hatH = J sum_j=1^Nsigma^z_j sigma^z_j+1 + h sum_j=1^N sigma^x_j","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"where we will certify both the ground-state energy and correlation functions.","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"using Yao\nusing LinearAlgebra\n\n# System parameters for exact diagonalization\nN = 3                    # Number of spins in the chain\nJ = 1.0                  # Coupling strength for Z-Z interactions\n\n# Arrays to store results across different magnetic field strengths\nground_state_energy_upper_bounds = Float64[]  # Energy per site\ns1s2values = Float64[]                        # S^z_1 * S^z_2 correlation\n\n# Loop over different transverse field strengths\nfor h in 0.1:0.2:2.0\n    # Construct the Heisenberg Hamiltonian with transverse field\n    # H = J/4 * Σ Z_i Z_{i+1} + h/2 * Σ X_i\n    ham = sum(J / 4 * kron(N, i => Z, mod1(i + 1, N) => Z) for i in 1:N) +\n          sum(h / 2 * put(N, i => X) for i in 1:N)\n\n    # Diagonalize the Hamiltonian to find eigenvalues and eigenvectors\n    evals, eigves = eigen(Matrix(ham))\n\n    # Calculate S^z_1 * S^z_2 correlation operator\n    s1s2 = Matrix(kron(N, 1 => Z, 2 => Z)) / 4\n\n    # Store ground state energy per site\n    push!(ground_state_energy_upper_bounds, minimum(real(evals)) / N)\n\n    # Calculate and store S^z_1 * S^z_2 expectation value in ground state\n    ground_state_idx = argmin(real(evals))\n    ground_state = eigves[:, ground_state_idx]\n    push!(s1s2values, real(ground_state' * s1s2 * ground_state))\nend","category":"page"},{"location":"examples/generated/certify_ground_state_property/#Computing-Lower-Bounds-with-Semidefinite-Programming","page":"Certifying Ground State Property","title":"Computing Lower Bounds with Semidefinite Programming","text":"","category":"section"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"Now we obtain rigorous lower bounds on the ground-state energy using NCTSSoS.jl. This approach formulates the quantum ground-state problem as a polynomial optimization problem and solves its semidefinite programming relaxation, providing certified lower bounds.","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"using NCTSSoS, NCTSSoS.FastPolynomials\nusing MosekTools\nusing JuMP\n\n# Configure Mosek solver with high precision settings\nSOLVER = optimizer_with_attributes(Mosek.Optimizer,\n    \"MSK_DPAR_INTPNT_CO_TOL_PFEAS\" => 1e-8,  # Primal feasibility tolerance\n    \"MSK_DPAR_INTPNT_CO_TOL_DFEAS\" => 1e-8,  # Dual feasibility tolerance\n    \"MSK_DPAR_INTPNT_CO_TOL_REL_GAP\" => 1e-8,  # Relative gap tolerance\n    \"MSK_IPAR_NUM_THREADS\" => 0)            # Use all available threads\n\n# Initialize array to store energy lower bounds\nground_state_energy_lower_bounds = Float64[]\n\n# System parameters (matching the exact diagonalization setup)\nN = 3                    # Number of spins\nT1 = ComplexF64          # Complex number type for calculations\nJ = 1.0                  # Coupling strength\n\n# Loop over the same magnetic field values as before\nfor (i, h) in enumerate(0.1:0.2:2.0)\n    # Define non-commutative polynomial variables for Pauli operators\n    @ncpolyvar x[1:N] y[1:N] z[1:N]  # x = σ^x, y = σ^y, z = σ^z\n\n    # Objective function: we want to minimize the Hamiltonian\n    # H = J/4 * Σ z_i z_{i+1} + h/2 * Σ x_i\n    ham = sum(T1(J / 4) * z[i] * z[mod1(i + 1, N)] + T1(h / 2) * x[i] for i in 1:N)\n\n    # Pauli operator algebra constraints (commutation relations)\n    # These encode the fundamental quantum mechanical properties of spin operators\n    eq_cons = reduce(vcat, [\n        [x[i] * y[i] - im * z[i],   # [σ^x_i, σ^y_i] = iσ^z_i\n         y[i] * x[i] + im * z[i],   # [σ^y_i, σ^x_i] = -iσ^z_i\n         y[i] * z[i] - im * x[i],   # [σ^y_i, σ^z_i] = iσ^x_i\n         z[i] * y[i] + im * x[i],   # [σ^z_i, σ^y_i] = -iσ^x_i\n         z[i] * x[i] - im * y[i],   # [σ^z_i, σ^x_i] = iσ^y_i\n         x[i] * z[i] + im * y[i]]   # [σ^x_i, σ^z_i] = -iσ^y_i\n        for i in 1:N])\n\n    # Create polynomial optimization problem\n    pop = cpolyopt(ham;\n        eq_constraints=eq_cons,                    # Pauli algebra constraints\n        comm_gps=[[x[i], y[i], z[i]] for i in 1:N], # Spin operators on same site commute\n        is_unipotent=true)                         # Pauli operators square to identity\n\n    # Configure solver with second-order moment relaxation\n    solver_config = SolverConfig(optimizer=SOLVER, order=2)\n\n    # Solve the semidefinite program to get energy lower bound\n    res = cs_nctssos(pop, solver_config)\n\n    # Store energy per site (divide by system size)\n    push!(ground_state_energy_lower_bounds, res.objective / N)\nend","category":"page"},{"location":"examples/generated/certify_ground_state_property/#Bounding-Ground-State-Correlation-Functions","page":"Certifying Ground State Property","title":"Bounding Ground-State Correlation Functions","text":"","category":"section"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"Beyond energy bounds, we can rigorously bound other ground-state properties such as correlation functions. Here we demonstrate bounding the expectation value of the two-point correlation function S^z_1S^z_2.","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"To accomplish this, we need a custom solver that can handle additional constraints on correlation functions. The following function extends the standard NCTSSoS solver to incorporate entry constraints.","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"\"\"\"\n    cs_nctssos_with_entry(pop, solver_config, entry_constraints; dualize=true)\n\nExtended NCTSSoS solver that incorporates additional entry constraints\nfor bounding specific correlation functions in quantum systems.\n\nThis function builds the moment matrix relaxation with sparsity patterns\nand adds semidefinite constraints to bound specific operator expectations.\n\"\"\"\nfunction cs_nctssos_with_entry(pop::OP, solver_config::SolverConfig, entry_constraints::Vector{Polynomial{T}}; dualize::Bool=true) where {T,P<:Polynomial{T},OP<:NCTSSoS.OptimizationProblem{P}}\n\n   # Initialize simplification algorithm for polynomial reduction\n   sa = SimplifyAlgorithm(comm_gps=pop.comm_gps, is_projective=pop.is_projective, is_unipotent=pop.is_unipotent)\n\n   # Determine the order of moment relaxation (automatic if not specified)\n   order = iszero(solver_config.order) ?\n       maximum([ceil(Int, maxdegree(poly) / 2) for poly in [pop.objective; pop.eq_constraints; pop.ineq_constraints]]) :\n       solver_config.order\n\n   # Exploit correlative sparsity to reduce problem size\n   corr_sparsity = NCTSSoS.correlative_sparsity(pop, order, solver_config.cs_algo)\n\n   # Decompose objective function across cliques (sparse subproblems)\n   cliques_objective = [reduce(+, [issubset(sort!(variables(mono)), clique) ? coef * mono : zero(coef) * one(mono) for (coef, mono) in zip(coefficients(pop.objective), monomials(pop.objective))]) for clique in corr_sparsity.cliques]\n\n   # Initialize support patterns for term sparsity\n   initial_activated_supps = map(zip(cliques_objective, corr_sparsity.clq_cons, corr_sparsity.clq_mom_mtx_bases)) do (partial_obj, cons_idx, mom_mtx_base)\n        NCTSSoS.init_activated_supp(partial_obj, corr_sparsity.cons[cons_idx], mom_mtx_base, sa)\n   end\n\n   # Apply term sparsity to further reduce problem size\n   cliques_term_sparsities = map(zip(initial_activated_supps, corr_sparsity.clq_cons, corr_sparsity.clq_mom_mtx_bases, corr_sparsity.clq_localizing_mtx_bases)) do (init_act_supp, cons_idx, mom_mtx_bases, localizing_mtx_bases)\n        NCTSSoS.term_sparsities(init_act_supp, corr_sparsity.cons[cons_idx], mom_mtx_bases, localizing_mtx_bases, solver_config.ts_algo, sa)\n   end\n\n   # Build the moment relaxation problem\n   moment_problem = NCTSSoS.moment_relax(pop, corr_sparsity, cliques_term_sparsities)\n\n   # Add entry constraints for correlation function bounds\n   # These are semidefinite constraints that ensure physical validity\n   for c in entry_constraints\n       push!(moment_problem.constraints,(:HPSD, [c;;]))\n   end\n\n   # Handle complex polynomial optimization (dual formulation)\n   (pop isa NCTSSoS.ComplexPolyOpt{P} && !dualize) && error(\"Solving Moment Problem for Complex Poly Opt is not supported\")\n   problem_to_solve = !dualize ? moment_problem : NCTSSoS.sos_dualize(moment_problem)\n\n   # Solve the semidefinite program\n   set_optimizer(problem_to_solve.model, solver_config.optimizer)\n   optimize!(problem_to_solve.model)\n\n   # Return optimization results\n   return NCTSSoS.PolyOptResult(objective_value(problem_to_solve.model), corr_sparsity, cliques_term_sparsities, problem_to_solve.model)\nend","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"Main.var\"##232\".cs_nctssos_with_entry","category":"page"},{"location":"examples/generated/certify_ground_state_property/#Computing-Rigorous-Bounds-on-Correlation-Functions","page":"Certifying Ground State Property","title":"Computing Rigorous Bounds on Correlation Functions","text":"","category":"section"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"Now we demonstrate the main result: computing rigorous upper and lower bounds on the two-point correlation function langle S^z_1 S^z_2 rangle. This showcases how polynomial optimization can certify physical properties beyond just the ground-state energy.","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"We use reference energy bounds (computed via high-precision DMRG) to constrain the optimization problem, ensuring our correlation function bounds are physically meaningful.","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"# Initialize arrays to store correlation function bounds\nlower_bounds = Float64[]\nupper_bounds = Float64[]\n\n# System parameters\nJ = 1.0  # Coupling strength (same as before)\n\n# Loop over magnetic field values\nfor (i, h) in enumerate(0.1:0.2:2.0)\n    # Define polynomial variables for Pauli operators\n    @ncpolyvar x[1:N] y[1:N] z[1:N]\n\n    # Objective function: S^z_1 * S^z_2 correlation\n    obj = one(T1) * z[1] * z[2]\n\n    # Hamiltonian (same form as before)\n    ham = sum(T1(J / 4) * z[i] * z[mod1(i + 1, N)] + T1(h / 2) * x[i] for i in 1:N)\n\n    # Pauli algebra constraints\n    eq_cons = reduce(vcat, [[x[i] * y[i] - im * z[i], y[i] * x[i] + im * z[i], y[i] * z[i] - im * x[i], z[i] * y[i] + im * x[i], z[i] * x[i] - im * y[i], x[i] * z[i] + im * y[i]] for i in 1:N])\n\n    # Energy constraint: ensure ground state energy is within reference bounds\n    # This is crucial for obtaining physically meaningful correlation bounds\n    ineq_cons = [ham - ground_state_energy_lower_bounds[i] * N]\n\n    # Create optimization problems for lower and upper bounds\n    # We solve two separate problems: minimize and maximize the correlation\n    pop_l = cpolyopt(obj; eq_constraints=eq_cons, ineq_constraints=ineq_cons,\n        comm_gps=[[x[i], y[i], z[i]] for i in 1:N], is_unipotent=true)\n\n    pop_u = cpolyopt(-obj; eq_constraints=eq_cons, ineq_constraints=ineq_cons,\n        comm_gps=[[x[i], y[i], z[i]] for i in 1:N], is_unipotent=true)\n\n    # Configure solver\n    solver_config = SolverConfig(optimizer=SOLVER, order=2)\n\n    # Additional energy constraint for the upper bound problem\n    single_ineq_cons = [ground_state_energy_upper_bounds[i] * N - ham]\n\n    # Solve for lower and upper bounds on correlation function\n    res_l = cs_nctssos_with_entry(pop_l, solver_config, single_ineq_cons; dualize=true)\n    res_u = cs_nctssos_with_entry(pop_u, solver_config, single_ineq_cons; dualize=true)\n\n    # Store bounds (divide by 4 to convert from Pauli to spin operators)\n    push!(lower_bounds, res_l.objective / 4)\n    push!(upper_bounds, -res_u.objective / 4)\nend","category":"page"},{"location":"examples/generated/certify_ground_state_property/#Visualizing-Certified-Correlation-Function-Bounds","page":"Certifying Ground State Property","title":"Visualizing Certified Correlation Function Bounds","text":"","category":"section"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"Finally, we visualize our results to demonstrate the tightness of the certified bounds. The polynomial optimization approach provides rigorous upper and lower bounds that closely bracket the exact correlation function values, validating the effectiveness of our certification method.","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"using CairoMakie\n\n# Create the visualization\nf = Figure(size=(800, 600))\nax = Axis(f[1, 1],\n    xlabel=\"Transverse Field Strength (h)\",\n    ylabel=L\"\\langle S^z_1 S^z_2 \\rangle\",\n    title=\"Certified Bounds on Ground-State Correlation Function\")\n\n# Magnetic field values for plotting\nxs = collect(0.1:0.2:2.0)\n\n# Plot the certified bounds\nscatterlines!(ax, xs, upper_bounds, color=:red, label=\"Upper Bound (SDP)\", linewidth=2, markersize=8)\nscatterlines!(ax, xs, lower_bounds, color=:green, label=\"Lower Bound (SDP)\", linewidth=2, markersize=8)\nscatterlines!(ax, xs, s1s2values, color=:blue, label=\"Exact Value (ED)\", linewidth=2, markersize=8)\n\n# Customize the plot\naxislegend(ax, position=:rt)\nax.xgridvisible = true\nax.ygridvisible = true\nax.xgridwidth = 0.5\nax.ygridwidth = 0.5\nax.xgridcolor = (:gray, 0.2)\nax.ygridcolor = (:gray, 0.2)\n\nf","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"<img width=800 height=600 style='object-fit: contain; height: auto;' src=\"data:image/png;base64, \"/>","category":"page"},{"location":"examples/generated/certify_ground_state_property/#Summary","page":"Certifying Ground State Property","title":"Summary","text":"","category":"section"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"This example demonstrates how polynomial optimization provides rigorous certified bounds on quantum ground-state properties. Key insights:","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"Tight bounds: The semidefinite programming relaxations yield bounds that closely bracket the exact values, providing high-precision certification.\nGeneral method: The approach works for any polynomial Hamiltonian and can bound arbitrary correlation functions, not just energies.\nScalability: By exploiting sparsity patterns (correlative and term sparsity), we can handle larger quantum systems efficiently.\nPhysical constraints: Energy bounds ensure physically meaningful correlation function bounds, preventing unphysical results.","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"This certification methodology is particularly valuable for quantum many-body systems where exact solutions are unavailable, providing guaranteed error bars on computed properties.\"}","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"","category":"page"},{"location":"examples/generated/certify_ground_state_property/","page":"Certifying Ground State Property","title":"Certifying Ground State Property","text":"This page was generated using Literate.jl.","category":"page"},{"location":"reference/","page":"References","title":"References","text":"ApS, M. (2025). The MOSEK Python Fusion API manual. Version 11.0.\n\n\n\nGarstka, M.; Cannon, M. and Goulart, P. (2021). COSMO: A Conic Operator Splitting Method for Convex Conic Problems. Journal of Optimization Theory and Applications 190, 779–810.\n\n\n\nGoulart, P. J. and Chen, Y. (2024). Clarabel: An interior-point solver for conic programs with quadratic objectives, arXiv:2405.12762 [math.OC].\n\n\n\nHuber, F.; Klep, I.; Magron, V. and Volcic, J. (2022). Dimension-free entanglement detection in multipartite Werner states. Communications in Mathematical Physics 396, 1051–1070.\n\n\n\nKlep, I.; Magron, V. and Volcic, J. (2022). Optimization over Trace Polynomials. Annales Henri Poincaré 23, 67–100, arXiv:2006.12510 [math-ph]. Accessed on Mar 25, 2025.\n\n\n\nKlep, I.; Magron, V.; Volcic, J. and Wang, J. (2024). State Polynomials: Positivity, Optimization and Nonlinear Bell Inequalities. Mathematical Programming 207, 645–691, arXiv:2301.12513 [math]. Accessed on Jan 16, 2025.\n\n\n\nKull, I.; Schuch, N.; Dive, B. and Navascués, M. (2024). Lower Bounds on Ground-State Energies of Local Hamiltonians through the Renormalization Group. Physical Review X 14, 021008. Accessed on May 14, 2024.\n\n\n\nLasserre, J.-B. (2010). Moments, Positive Polynomials and Their Applications. V. 1 of Imperial College Press Optimization Series (Imperial College Press ; Distributed by World Scientific Publishing Co, London : Signapore ; Hackensack, NJ).\n\n\n\nMagron, V. and Wang, J. (2023). Sparse Polynomial Optimization: Theory and Practice. Vol. 5 of Series on Optimization and Its Applications (World Scientific Publishing Europe Ltd, London).\n\n\n\nPál, K. F. and Vértesi, T. (2010). Maximal violation of a bipartite three-setting, two-outcome Bell inequality using infinite-dimensional quantum systems. Phys. Rev. A 82, 022116.\n\n\n\nPozsgay, V.; Hirsch, F.; Branciard, C. and Brunner, N. (2017). Covariance Bell inequalities. Phys. Rev. A 96, 062128.\n\n\n\nVandenberghe, L. and Boyd, S. (1996). Semidefinite programming. SIAM review 38, 49–95.\n\n\n\nWang, J. and Magron, V. (2021). Exploiting Term Sparsity in Noncommutative Polynomial Optimization. Computational Optimization and Applications 80, 483–521. Accessed on Jan 18, 2025.\n\n\n\nWang, J.; Surace, J.; Frérot, I.; Legat, B.; Renou, M.-O.; Magron, V. and Acín, A. (2024). Certifying Ground-State Properties of Quantum Many-Body Systems. Physical Review X 14, 031006, arXiv:2310.05844 [quant-ph]. Accessed on Dec 29, 2024.\n\n\n\n","category":"page"},{"location":"apis/relaxations/#Moment-Relaxation","page":"SDP Relaxation","title":"Moment Relaxation","text":"","category":"section"},{"location":"apis/relaxations/#NCTSSoS.moment_relax","page":"SDP Relaxation","title":"NCTSSoS.moment_relax","text":"moment_relax(pop::PolyOpt{P}, corr_sparsity::CorrelativeSparsity, cliques_term_sparsities::Vector{Vector{TermSparsity{M}}}) where {T,P<:AbstractPolynomial{T},M}\n\nConstruct a moment relaxation of a polynomial optimization problem using correlative sparsity.\n\nArguments\n\npop::PolyOpt{P}: The polynomial optimization problem to relax\ncorr_sparsity::CorrelativeSparsity: The correlative sparsity structure defining cliques and global constraints\ncliques_term_sparsities::Vector{Vector{TermSparsity{M}}}: Term sparsity information for each clique, containing block bases for moment matrix indexing\n\nReturns\n\nMomentProblem: A moment relaxation problem containing the JuMP model, constraint references, monomial mapping, and simplification algorithm\n\nDescription\n\nThis function creates a semidefinite programming relaxation of the input polynomial optimization problem by:\n\nComputing the total basis from all clique term sparsities\nCreating JuMP variables for each monomial in the basis\nConstructing moment matrix constraints for each clique and global constraint\nSetting up the objective function using variable substitution\n\nThe relaxation exploits correlative sparsity to reduce the size of the semidefinite program by partitioning constraints into cliques and handling global constraints separately.\n\n\n\n\n\n","category":"function"},{"location":"apis/relaxations/#Sum-of-Squares-Relaxation","page":"SDP Relaxation","title":"Sum-of-Squares Relaxation","text":"","category":"section"},{"location":"apis/relaxations/#NCTSSoS.sos_dualize","page":"SDP Relaxation","title":"NCTSSoS.sos_dualize","text":"sos_dualize(moment_problem::MomentProblem{T,M}) where {T,M} -> SOSProblem\n\nConvert a moment problem into its dual SOS (Sum of Squares) problem formulation.\n\nThis function takes a moment problem and constructs the corresponding dual optimization problem by introducing matrix variables for each constraint and formulating the dual constraints that ensure polynomial equality.\n\nArguments\n\nmoment_problem::MomentProblem{T,M}: The primal moment problem to dualize\n\nReturns\n\nSOSProblem: The dual SOS problem with matrix variables and constraints\n\nDetails\n\nThe dualization process involves:\n\nCreating matrix variables (G_j) for each constraint, either in symmetric matrix space or positive semidefinite cone depending on the constraint type\nIntroducing a scalar variable b to bound the minimum value of the primal problem\nSetting up polynomial equality constraints by matching coefficients of monomials\nHandling symmetrization of the monomial basis to ensure proper polynomial comparison\n\nThe resulting dual problem maximizes b subject to the constraint that the sum of matrix variables weighted by coefficient matrices equals the objective polynomial.\n\n\n\n\n\n","category":"function"},{"location":"examples/generated/pauli_gns_construction/#GNS-Construction-for-Pauli-Operator-Reconstruction","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operator Reconstruction","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"The Gelfand-Naimark-Segal (GNS) construction is a fundamental mathematical tool in quantum mechanics that allows us to represent abstract quantum states and operators as concrete matrices acting on a Hilbert space. For physicists, this provides a systematic way to reconstruct operator representations from expectation values (moments).","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Background:-From-Expectation-Values-to-Matrix-Representations","page":"GNS Construction for Pauli Operators","title":"Background: From Expectation Values to Matrix Representations","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"In quantum mechanics, we often know the expectation values of operators in a given state:","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"langle A  rangle = textTr(rho A)","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"where rho is the density matrix and A is an operator.","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"The GNS construction answers the question: Can we reconstruct the actual matrices representing operators from just these expectation values?","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"The key insight is that the collection of all expectation values defines a moment matrix (also called a Hankel matrix in the context of polynomial optimization):","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"H_ij = langle b_i^dagger b_j rangle","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"where b_i is a basis of operators (monomials in our variables).","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Pauli-Operators:-A-Simple-Quantum-System","page":"GNS Construction for Pauli Operators","title":"Pauli Operators: A Simple Quantum System","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Let's start with the simplest non-trivial quantum system: a single qubit with Pauli operators. The Pauli matrices are:","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"sigma_x = beginpmatrix 0  1  1  0  endpmatrix\nsigma_y = beginpmatrix 0  -i  i  0 endpmatrix\nsigma_z = beginpmatrix 1  0  0  -1 endpmatrix`","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"These satisfy the fundamental Pauli algebra:","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"sigma_x^2 = sigma_y^2 = sigma_z^2 = I (squares equal identity)\nsigma_i sigma_j = 0 for i neq j (anti-commutation)\nsigma_i sigma_j = 2iepsilon_ijksigma_k (commutation relations)","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Step-1:-Define-Non-commuting-Variables","page":"GNS Construction for Pauli Operators","title":"Step 1: Define Non-commuting Variables","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"using NCTSSoS\nusing NCTSSoS.FastPolynomials\nusing LinearAlgebra\nusing LinearAlgebra: tr","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"In NCTSSoS.jl, we represent Pauli operators as non-commuting polynomial variables: Declare non-commuting variables for Pauli operators","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"@ncpolyvar x y z;","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"These variables x, y, z will represent σₓ, σᵧ, σ_z respectively","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"vars = [x, y, z];","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Step-2:-Choose-a-Quantum-State","page":"GNS Construction for Pauli Operators","title":"Step 2: Choose a Quantum State","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"zero_state = ComplexF64[1; 0];    # |0⟩\none_state = ComplexF64[0; 1];","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Define quantum states for testing For clear reconstruction, use a pure state","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"ρ =  zero_state * zero_state'","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"2×2 Matrix{ComplexF64}:\n 1.0+0.0im  0.0+0.0im\n 0.0+0.0im  0.0+0.0im","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Step-3:-Compute-Expectation-Values","page":"GNS Construction for Pauli Operators","title":"Step 3: Compute Expectation Values","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"We need a function to compute the expectation value of any monomial in our variables:","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"function expval_pauli(mono::Monomial, ρ::Matrix)\n    if isone(mono)\n        return 1.0 + 0.0im  # ⟨I⟩ = 1 for normalized states\n    end\n\n    # Start with identity matrix\n    mat = Matrix{ComplexF64}(I, 2, 2)\n\n    # Multiply the appropriate Pauli matrices\n    for (var, exp) in zip(mono.vars, mono.z)\n        pauli_mat = if var == x\n            ComplexF64[0 1; 1 0]      # σₓ\n        elseif var == y\n            ComplexF64[0 -im; im 0]   # σᵧ\n        elseif var == z\n            ComplexF64[1 0; 0 -1]     # σ_z\n        else\n            error(\"Unknown variable: $var\")\n        end\n\n        # Raise to the appropriate power\n        for _ in 1:exp\n            mat = mat * pauli_mat\n        end\n    end\n\n    # Compute Tr(ρ * mat)\n    return tr(ρ * mat)\nend","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"expval_pauli (generic function with 1 method)","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Step-4:-Build-the-Moment-(Hankel)-Matrix","page":"GNS Construction for Pauli Operators","title":"Step 4: Build the Moment (Hankel) Matrix","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"The moment matrix encodes all expectation values of products of our basis operators:","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Choose the degree of our polynomial basis","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"degree = 4;","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Generate the basis of monomials up to the specified degree","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"basis = NCTSSoS.get_basis(vars, degree)\n\nprintln(\"Basis operators (monomials):\")\nfor (i, b) in enumerate(basis)\n    println(\"$i: $b\")\nend","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Basis operators (monomials):\n1: 1\n2: x¹\n3: y¹\n4: z¹\n5: x¹y¹\n6: x¹z¹\n7: x²\n8: y¹x¹\n9: y¹z¹\n10: y²\n11: z¹x¹\n12: z¹y¹\n13: z²\n14: x¹y¹x¹\n15: x¹y¹z¹\n16: x¹y²\n17: x¹z¹x¹\n18: x¹z¹y¹\n19: x¹z²\n20: x²y¹\n21: x²z¹\n22: x³\n23: y¹x¹y¹\n24: y¹x¹z¹\n25: y¹x²\n26: y¹z¹x¹\n27: y¹z¹y¹\n28: y¹z²\n29: y²x¹\n30: y²z¹\n31: y³\n32: z¹x¹y¹\n33: z¹x¹z¹\n34: z¹x²\n35: z¹y¹x¹\n36: z¹y¹z¹\n37: z¹y²\n38: z²x¹\n39: z²y¹\n40: z³\n41: x¹y¹x¹y¹\n42: x¹y¹x¹z¹\n43: x¹y¹x²\n44: x¹y¹z¹x¹\n45: x¹y¹z¹y¹\n46: x¹y¹z²\n47: x¹y²x¹\n48: x¹y²z¹\n49: x¹y³\n50: x¹z¹x¹y¹\n51: x¹z¹x¹z¹\n52: x¹z¹x²\n53: x¹z¹y¹x¹\n54: x¹z¹y¹z¹\n55: x¹z¹y²\n56: x¹z²x¹\n57: x¹z²y¹\n58: x¹z³\n59: x²y¹x¹\n60: x²y¹z¹\n61: x²y²\n62: x²z¹x¹\n63: x²z¹y¹\n64: x²z²\n65: x³y¹\n66: x³z¹\n67: x⁴\n68: y¹x¹y¹x¹\n69: y¹x¹y¹z¹\n70: y¹x¹y²\n71: y¹x¹z¹x¹\n72: y¹x¹z¹y¹\n73: y¹x¹z²\n74: y¹x²y¹\n75: y¹x²z¹\n76: y¹x³\n77: y¹z¹x¹y¹\n78: y¹z¹x¹z¹\n79: y¹z¹x²\n80: y¹z¹y¹x¹\n81: y¹z¹y¹z¹\n82: y¹z¹y²\n83: y¹z²x¹\n84: y¹z²y¹\n85: y¹z³\n86: y²x¹y¹\n87: y²x¹z¹\n88: y²x²\n89: y²z¹x¹\n90: y²z¹y¹\n91: y²z²\n92: y³x¹\n93: y³z¹\n94: y⁴\n95: z¹x¹y¹x¹\n96: z¹x¹y¹z¹\n97: z¹x¹y²\n98: z¹x¹z¹x¹\n99: z¹x¹z¹y¹\n100: z¹x¹z²\n101: z¹x²y¹\n102: z¹x²z¹\n103: z¹x³\n104: z¹y¹x¹y¹\n105: z¹y¹x¹z¹\n106: z¹y¹x²\n107: z¹y¹z¹x¹\n108: z¹y¹z¹y¹\n109: z¹y¹z²\n110: z¹y²x¹\n111: z¹y²z¹\n112: z¹y³\n113: z²x¹y¹\n114: z²x¹z¹\n115: z²x²\n116: z²y¹x¹\n117: z²y¹z¹\n118: z²y²\n119: z³x¹\n120: z³y¹\n121: z⁴\n","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Build the moment matrix H where H[i,j] = ⟨bi† * bj⟩","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"n = length(basis)\nH = zeros(ComplexF64, n, n)\n\nfor i in 1:n\n    for j in 1:n\n        mono_i = basis[i]\n        mono_j = basis[j]\n\n        # Compute the product monomial\n        product = NCTSSoS.neat_dot(mono_i, mono_j)\n\n        # Get the expectation value\n        H[i, j] = expval_pauli(product, ρ)\n    end\nend","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Verify that H is Hermitian (as required by quantum mechanics)","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"println(\"Moment matrix H is Hermitian: \", H ≈ H')","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Moment matrix H is Hermitian: true\n","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Step-5:-GNS-Reconstruction","page":"GNS Construction for Pauli Operators","title":"Step 5: GNS Reconstruction","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Now we use the reconstruct function to perform the GNS construction and obtain concrete matrix representations of our abstract operators:","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"X_recon, Y_recon, Z_recon = reconstruct(H, vars, degree; atol=0.001)","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"3-element Vector{Matrix{ComplexF64}}:\n [0.0 + 0.0im 3.574334513209998e-48 + 1.0000000000000004im; 2.753963633492892e-48 - 1.0000000000000004im -8.310098917615953e-33 + 6.366149832128084e-51im]\n [0.0 + 0.0im 1.0000000000000004 - 3.574334513209998e-48im; 1.0000000000000004 + 2.753963633492892e-48im -2.347184397671815e-50 - 6.1530573799022466e-33im]\n [1.0000000000000002 + 0.0im -2.353834293849223e-50 - 5.7353166945488984e-33im; -2.51012310344404e-50 + 4.651031097596431e-33im -1.0000000000000009 + 2.3381282238640562e-48im]","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"println(\"Reconstructed Pauli operators:\")\nprintln(\"σₓ (reconstructed):\")\nround.(X_recon, digits=6)","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"2×2 Matrix{ComplexF64}:\n 0.0+0.0im   0.0+1.0im\n 0.0-1.0im  -0.0+0.0im","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"println(\"σᵧ (reconstructed):\")\nround.(Y_recon, digits=6)","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"2×2 Matrix{ComplexF64}:\n 0.0+0.0im   1.0-0.0im\n 1.0+0.0im  -0.0-0.0im","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"println(\"σ_z (reconstructed):\")\nround.(Z_recon, digits=6)","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"2×2 Matrix{ComplexF64}:\n  1.0+0.0im  -0.0-0.0im\n -0.0+0.0im  -1.0+0.0im","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Step-6:-Verify-Pauli-Algebra","page":"GNS Construction for Pauli Operators","title":"Step 6: Verify Pauli Algebra","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"The true test of our reconstruction is whether the recovered operators satisfy the Pauli algebra relations:","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Test-1:-Squares-should-equal-identity-(X-Y-Z-I)","page":"GNS Construction for Pauli Operators","title":"Test 1: Squares should equal identity (X² = Y² = Z² = I)","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"X2 = X_recon * X_recon\nY2 = Y_recon * Y_recon\nZ2 = Z_recon * Z_recon\n\nprintln(\"   ||X² - I|| = $(norm(X2 - I))\")\nprintln(\"   ||Y² - I|| = $(norm(Y2 - I))\")\nprintln(\"   ||Z² - I|| = $(norm(Z2 - I))\")","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"   ||X² - I|| = 1.2560739669470201e-15\n   ||Y² - I|| = 1.2560739669470201e-15\n   ||Z² - I|| = 1.831026719408895e-15\n","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Test-2:-Anti-commutation-relations-({σᵢ,-σⱼ}-0-for-i-j)","page":"GNS Construction for Pauli Operators","title":"Test 2: Anti-commutation relations ({σᵢ, σⱼ} = 0 for i ≠ j)","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"anticomm_XY = X_recon * Y_recon + Y_recon * X_recon\nanticomm_YZ = Y_recon * Z_recon + Z_recon * Y_recon\nanticomm_ZX = Z_recon * X_recon + X_recon * Z_recon\n\nprintln(\"||{X,Y}|| = $(norm(anticomm_XY))\")\nprintln(\"||{Y,Z}|| = $(norm(anticomm_YZ))\")\nprintln(\"||{Z,X}|| = $(norm(anticomm_ZX))\")","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"||{X,Y}|| = 1.4623122726759252e-32\n||{Y,Z}|| = 9.42055475210265e-16\n||{Z,X}|| = 9.42055475210265e-16\n","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Test-3:-Commutation-relations-([σᵢ,-σⱼ]-2iε_ijkσₖ)","page":"GNS Construction for Pauli Operators","title":"Test 3: Commutation relations ([σᵢ, σⱼ] = 2iε_ijkσₖ)","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"comm_XY = X_recon * Y_recon - Y_recon * X_recon\ncomm_YZ = Y_recon * Z_recon - Z_recon * Y_recon\ncomm_ZX = Z_recon * X_recon - X_recon * Z_recon\n\nprintln(\"||[X,Y] - 2iZ|| = $(norm(comm_XY - 2im * Z_recon))\")\nprintln(\"||[Y,Z] - 2iX|| = $(norm(comm_YZ - 2im * X_recon))\")\nprintln(\"||[Z,X] - 2iY|| = $(norm(comm_ZX - 2im * Y_recon))\")","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"||[X,Y] - 2iZ|| = 1.3322676295501878e-15\n||[Y,Z] - 2iX|| = 1.2560739669470201e-15\n||[Z,X] - 2iY|| = 1.2560739669470201e-15\n","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Understanding-Unitary-Freedom-in-GNS-Reconstruction","page":"GNS Construction for Pauli Operators","title":"Understanding Unitary Freedom in GNS Reconstruction","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Important observation: Looking at the reconstructed matrices above, you may notice that the reconstructed X looks like the usual Pauli Y matrix (with an overall negative sign), and the reconstructed Y looks like the usual Pauli X matrix. This might seem surprising, but it's completely fine! Here's why:","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"The Pauli algebra is still satisfied: Even though X_recon ≈ -σ_y (negative Pauli-Y), it still satisfies all the required algebraic relations:\nX² = I (since (-σy)² = σy² = I)\n{X, Y} = 0 (anticommutation still holds)\n[X, Y] = 2iZ (commutation relations preserved)\nUnitary equivalence: The reconstructed matrices differ from standard Pauli matrices by a unitary transformation. This is fundamental to GNS construction - it only guarantees reconstruction up to unitary equivalence, not exact reconstruction of a specific matrix representation.","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Example-2:-Random-Pure-State","page":"GNS Construction for Pauli Operators","title":"Example 2: Random Pure State","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Let's verify that GNS reconstruction works for an arbitrary pure state:","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Create a random normalized pure state (not aligned with computational basis)","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"using Random  # For reproducibility in random state example\nRandom.seed!(42)  # For reproducibility\nψ_random = normalize(randn(ComplexF64, 2))\nρ_random = ψ_random * ψ_random'\n\n@show ψ_random;","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"ψ_random = ComplexF64[0.48005951599229074 - 0.5357791469433075im, -0.532085869997182 - 0.44650665589136673im]\n","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Build moment matrix and reconstruct","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"H_random = zeros(ComplexF64, n, n)\nfor i in 1:n, j in 1:n\n    product = NCTSSoS.neat_dot(basis[i], basis[j])\n    H_random[i, j] = expval_pauli(product, ρ_random)\nend\n\nX_rand, Y_rand, Z_rand = reconstruct(H_random, vars, degree; atol=0.001)\n\n@show rank(H_random, atol=1e-6);\n@show size(X_rand);","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Rank of full Hankel matrix H: 2 (using atol=0.001)\nRank of hankel_block (degree 3): 2 (using atol=0.001)\n✓ Flatness condition satisfied: rank(H) = rank(hankel_block) = 2\nGNS reconstruction: keeping 2 singular values > 0.001, reconstructed matrices will be 2×2\nVariable x: constructed (2, 2) matrix representation\nVariable y: constructed (2, 2) matrix representation\nVariable z: constructed (2, 2) matrix representation\nrank(H_random, atol = 1.0e-6) = 2\nsize(X_rand) = (2, 2)\n","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"The reconstructed operators look very different from standard Pauli matrices:","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"X_rand","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"2×2 Matrix{ComplexF64}:\n -0.0324079+1.23262e-19im   0.994615-0.0984462im\n   0.994615+0.0984462im    0.0324079-3.68775e-18im","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Y_rand","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"2×2 Matrix{ComplexF64}:\n  -0.998861-1.45507e-19im  -0.0356829-0.0316907im\n -0.0356829+0.0316907im      0.998861+1.01064e-17im","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Z_rand","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"2×2 Matrix{ComplexF64}:\n 0.0350329-3.53414e-18im   -0.097307-0.994638im\n -0.097307+0.994638im     -0.0350329-8.01641e-18im","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"The reconstructed operators are not in the familar form but still satisfy the Pauli algebra:","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"@show norm(X_rand * X_rand - I);\n@show norm(X_rand * Y_rand + Y_rand * X_rand);\n@show norm((X_rand * Y_rand - Y_rand * X_rand) - 2im * Z_rand);","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"norm(X_rand * X_rand - I) = 4.9544522472129334e-17\nnorm(X_rand * Y_rand + Y_rand * X_rand) = 9.504511772915181e-16\nnorm((X_rand * Y_rand - Y_rand * X_rand) - (2im) * Z_rand) = 5.162078360867593e-16\n","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Now, let's diagonalize Z_rand and use its eigenvectors to transform all three operators:","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Transforming-to-Eigenbasis-of-Z","page":"GNS Construction for Pauli Operators","title":"Transforming to Eigenbasis of Z","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"The key insight: If we diagonalize Z_rand, the resulting unitary transformation will bring X, Y, and Z into the standard Pauli matrix form (up to ordering and phases).","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"F_rand = eigen(Z_rand)  # Diagonalize Z, not Y!\n\n@show F_rand.values;","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"F_rand.values = ComplexF64[-1.0 - 1.672081166228218e-17im, 1.0 + 6.247779567868549e-18im]\n","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Important: eigen() may return eigenvectors in any order. The standard Pauli Z matrix is σ_z = diag(1, -1), so we want eigenvalue +1 first and -1 second.","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"if real(F_rand.values[1]) < real(F_rand.values[2])\n    # Need to swap eigenvectors to get correct ordering (eigenvalue +1 first)\n    U_rand = F_rand.vectors[:, [2, 1]]\n    @info \"Reordered eigenvectors to match σ_z = diag(1, -1) convention\"\nelse\n    U_rand = F_rand.vectors\nend","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"[ Info: Reordered eigenvectors to match σ_z = diag(1, -1) convention\n","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Apply the unitary transformation Urand† · (operator) · Urand to all three operators:","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Z_transformed = U_rand' * Z_rand * U_rand;\nX_transformed = U_rand' * X_rand * U_rand;\nY_transformed = U_rand' * Y_rand * U_rand;","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Display the transformed operators:","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"println(\"\\nZ after transformation (should be diagonal):\")\nround.(Z_transformed, digits=4)","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"2×2 Matrix{ComplexF64}:\n 1.0+0.0im   0.0+0.0im\n 0.0+0.0im  -1.0-0.0im","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"println(\"\\nX after transformation:\")\nround.(X_transformed, digits=4)","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"2×2 Matrix{ComplexF64}:\n    0.0+0.0im     0.9916-0.1296im\n 0.9916+0.1296im     0.0-0.0im","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"println(\"\\nY after transformation:\")\nround.(Y_transformed, digits=4)","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"2×2 Matrix{ComplexF64}:\n     0.0+0.0im     -0.1296-0.9916im\n -0.1296+0.9916im      0.0+0.0im","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Second-Unitary-Transformation-to-Fix-X-and-Y","page":"GNS Construction for Pauli Operators","title":"Second Unitary Transformation to Fix X and Y","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"The first transformation (diagonalizing Z) gave us a diagonal Z, but X and Y might still differ from standard Pauli matrices by permutations or sign flips. We need a second unitary transformation that:","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Preserves the diagonal form of Z (must be diagonal in the Z eigenbasis)\nBrings X and Y to their standard forms","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"The most general unitary that preserves a diagonal matrix is another diagonal unitary (phase matrix) or a permutation followed by phases. Let's construct this explicitly:","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Systematic-Approach:-Determine-U-from-X_transformed","page":"GNS Construction for Pauli Operators","title":"Systematic Approach: Determine U₂ from X_transformed","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Goal: Find U₂ such that:","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"U₂† · Xtransformed · U₂ = σx = [0 1; 1 0]\nU₂† · Ztransformed · U₂ = Ztransformed (preserve Z's diagonal form)\nU₂† · Ytransformed · U₂ = σy = [0 -im; im 0] (automatically satisfied if 1 & 2 hold)","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Key insight: Since Z is diagonal, any unitary that preserves Z must be diagonal: U₂ = diag(e^(iα), e^(iβ))","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"If X_transformed = [0  a; b  0], we want: U₂† · X_transformed · U₂ = [0  e^(-iα)·a·e^(iβ); e^(-iβ)·b·e^(iα)  0] = [0  1; 1  0]","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"This requires: e^(i(β-α))·a = 1, so β - α = -arg(a) And for Hermiticity (b = a): e^(i(α-β))·a = 1, which is automatically satisfied","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"We can choose α = 0, then β = -arg(a)","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Let's compute this systematically:","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"σ_x = ComplexF64[0 1; 1 0]\nσ_y = ComplexF64[0 -im; im 0]\nσ_z = ComplexF64[1 0; 0 -1]\nif abs(Z_transformed[1,1] - 1) < 0.1 || abs(Z_transformed[1,1] + 1) < 0.1  # Z is diagonal\n    # Extract the off-diagonal elements of X_transformed\n    # X should have form [0  a; a*  0] for Hermitian matrix\n    a = X_transformed[1, 2]\n\n    # We want U₂† [0 a; a* 0] U₂ = [0 1; 1 0]\n    # With U₂ = diag(e^(iα), e^(iβ)), this gives:\n    # [0  e^(-iα)ae^(iβ); e^(-iβ)a*e^(iα)  0] = [0 1; 1 0]\n    # So we need: e^(i(β-α)) = 1/a, or β - α = -arg(a)\n\n    # Choose α = 0, then β = -arg(a)\n    α = 0.0\n    β = -angle(a)\n\n    # Construct U₂\n    U2_systematic = diagm([exp(im*α), exp(im*β)])\n\n    println(\"\\nPhases determined: α = $α, β = $β\")\n    println(\"This should make X_transformed[1,2] real and positive: $(exp(im*(β-α)) * a)\")\n\n    # Apply the systematic transformation\n    Z_corrected = U2_systematic' * Z_transformed * U2_systematic\n    X_corrected = U2_systematic' * X_transformed * U2_systematic\n    Y_corrected = U2_systematic' * Y_transformed * U2_systematic\n\n    println(\"\\n=== After Systematic Phase Correction ===\")\n\n    println(\"\\nZ (should remain unchanged since U₂ is diagonal):\")\n    println(round.(Z_corrected, digits=6))\n    println(\"Verification: ||Z_corrected - Z_transformed|| = $(norm(Z_corrected - Z_transformed))\")\n\n    println(\"\\nX (should now match σ_x):\")\n    println(round.(X_corrected, digits=6))\n\n    println(\"\\nY (should now match σ_y):\")\n    println(round.(Y_corrected, digits=6))\n\n    println(\"\\n=== Final Verification ===\")\n    println(\"Distance from standard Pauli matrices:\")\n    println(\"||Z_corrected - σ_z|| = $(norm(Z_corrected - σ_z))\")\n    println(\"||X_corrected - σ_x|| = $(norm(X_corrected - σ_x))\")\n    println(\"||Y_corrected - σ_y|| = $(norm(Y_corrected - σ_y))\")\n\n    # If still not perfect, check for permutations\n    if norm(X_corrected - σ_x) > 0.01\n        println(\"\\nChecking if X and Y are swapped:\")\n        println(\"||X_corrected - σ_y|| = $(norm(X_corrected - σ_y))\")\n        println(\"||Y_corrected - σ_x|| = $(norm(Y_corrected - σ_x))\")\n    end\n\n    # Verify Pauli algebra is still satisfied\n    println(\"\\n=== Verify Pauli Algebra Still Holds ===\")\n    println(\"||X² - I|| = $(norm(X_corrected * X_corrected - I))\")\n    println(\"||Y² - I|| = $(norm(Y_corrected * Y_corrected - I))\")\n    println(\"||Z² - I|| = $(norm(Z_corrected * Z_corrected - I))\")\n    println(\"||[X,Y] - 2iZ|| = $(norm((X_corrected * Y_corrected - Y_corrected * X_corrected) - 2im * Z_corrected))\")\nend","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"\nPhases determined: α = 0.0, β = 0.12995470935070005\nThis should make X_transformed[1,2] real and positive: 0.9999999999999997 + 2.7755575615628914e-17im\n\n=== After Systematic Phase Correction ===\n\nZ (should remain unchanged since U₂ is diagonal):\nComplexF64[1.0 + 0.0im 0.0 + 0.0im; 0.0 - 0.0im -1.0 - 0.0im]\nVerification: ||Z_corrected - Z_transformed|| = 2.4360324397437158e-17\n\nX (should now match σ_x):\nComplexF64[0.0 + 0.0im 1.0 + 0.0im; 1.0 - 0.0im 0.0 - 0.0im]\n\nY (should now match σ_y):\nComplexF64[0.0 + 0.0im 0.0 - 1.0im; 0.0 + 1.0im 0.0 + 0.0im]\n\n=== Final Verification ===\nDistance from standard Pauli matrices:\n||Z_corrected - σ_z|| = 2.8052198857519395e-16\n||X_corrected - σ_x|| = 4.922826142722048e-16\n||Y_corrected - σ_y|| = 6.521822047694349e-16\n\n=== Verify Pauli Algebra Still Holds ===\n||X² - I|| = 9.499064443774055e-16\n||Y² - I|| = 1.2948801525946436e-15\n||Z² - I|| = 4.478422697720281e-16\n||[X,Y] - 2iZ|| = 1.1309194191732256e-15\n","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Example-3:-Mixed-State-with-Higher-Rank","page":"GNS Construction for Pauli Operators","title":"Example 3: Mixed State with Higher Rank","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Now let's see what happens with a mixed state that is not a pure state. Mixed state: ½|0⟩⟨0| + ½|+⟩⟨+| where |+⟩ = (|0⟩ + |1⟩)/√2","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"plus_state = normalize(ComplexF64[1; 1])\nρ_mixed = 0.5 * (zero_state * zero_state') + 0.5 * (plus_state * plus_state')","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"2×2 Matrix{ComplexF64}:\n 0.75+0.0im  0.25+0.0im\n 0.25+0.0im  0.25+0.0im","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Build moment matrix and reconstruct","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"H_mixed = zeros(ComplexF64, n, n)\nfor i in 1:n, j in 1:n\n    product = NCTSSoS.neat_dot(basis[i], basis[j])\n    H_mixed[i, j] = expval_pauli(product, ρ_mixed)\nend\n\nX_mixed, Y_mixed, Z_mixed = reconstruct(H_mixed, vars, degree; atol=0.001)\n\n@show rank(H_mixed, atol=1e-6);\n@show size(X_mixed);","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Rank of full Hankel matrix H: 4 (using atol=0.001)\nRank of hankel_block (degree 3): 4 (using atol=0.001)\n✓ Flatness condition satisfied: rank(H) = rank(hankel_block) = 4\nGNS reconstruction: keeping 4 singular values > 0.001, reconstructed matrices will be 4×4\nVariable x: constructed (4, 4) matrix representation\nVariable y: constructed (4, 4) matrix representation\nVariable z: constructed (4, 4) matrix representation\nrank(H_mixed, atol = 1.0e-6) = 4\nsize(X_mixed) = (4, 4)\n","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"For a mixed state, the rank can be higher! The reconstructed operators now act on a direct sum of smaller Hilbert spaces. But remarkably, they still satisfy the Pauli algebra:","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Complete-Pauli-Algebra-Verification","page":"GNS Construction for Pauli Operators","title":"Complete Pauli Algebra Verification","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"dim_mixed = size(X_mixed, 1)","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"4","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Test 1: Squares should equal identity (σᵢ² = I)","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"println(\"||X² - I|| = $(norm(X_mixed * X_mixed - I(dim_mixed)))\")\nprintln(\"||Y² - I|| = $(norm(Y_mixed * Y_mixed - I(dim_mixed)))\")\nprintln(\"||Z² - I|| = $(norm(Z_mixed * Z_mixed - I(dim_mixed)))\")","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"||X² - I|| = 2.4124410454036057e-15\n||Y² - I|| = 2.7614386208727306e-15\n||Z² - I|| = 2.6211266463523374e-15\n","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Test 2: Anti-commutation relations ({σᵢ, σⱼ} = 0 for i ≠ j)","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"anticomm_XY_mixed = X_mixed * Y_mixed + Y_mixed * X_mixed\nanticomm_YZ_mixed = Y_mixed * Z_mixed + Z_mixed * Y_mixed\nanticomm_ZX_mixed = Z_mixed * X_mixed + X_mixed * Z_mixed\n\nprintln(\"||{X,Y}|| = $(norm(anticomm_XY_mixed))\")\nprintln(\"||{Y,Z}|| = $(norm(anticomm_YZ_mixed))\")\nprintln(\"||{Z,X}|| = $(norm(anticomm_ZX_mixed))\")","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"||{X,Y}|| = 1.81421523891841e-15\n||{Y,Z}|| = 2.6164352461025136e-15\n||{Z,X}|| = 2.5553316515572013e-15\n","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"Test 3: Commutation relations ([σᵢ, σⱼ] = 2iε_ijkσₖ)","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"comm_XY_mixed = X_mixed * Y_mixed - Y_mixed * X_mixed\ncomm_YZ_mixed = Y_mixed * Z_mixed - Z_mixed * Y_mixed\ncomm_ZX_mixed = Z_mixed * X_mixed - X_mixed * Z_mixed\n\nprintln(\"||[X,Y] - 2iZ|| = $(norm(comm_XY_mixed - 2im * Z_mixed))\")\nprintln(\"||[Y,Z] - 2iX|| = $(norm(comm_YZ_mixed - 2im * X_mixed))\")\nprintln(\"||[Z,X] - 2iY|| = $(norm(comm_ZX_mixed - 2im * Y_mixed))\")","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"||[X,Y] - 2iZ|| = 3.560277133665956e-15\n||[Y,Z] - 2iX|| = 3.5287866252028285e-15\n||[Z,X] - 2iY|| = 2.4546810564734144e-15\n","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"This demonstrates that GNS reconstruction can handle both pure and mixed states, automatically determining the appropriate Hilbert space dimension!","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Understanding-the-Flat-Extension-Property","page":"GNS Construction for Pauli Operators","title":"Understanding the Flat Extension Property","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"A crucial condition for successful GNS reconstruction is the flat extension property. This requires that the rank of the full moment matrix equals the rank of its principal submatrix (the Hankel block).","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"The reconstruct function automatically checks this condition and will issue a warning if it's not satisfied. When the flatness condition holds, we can be confident that our reconstruction is valid and complete.","category":"page"},{"location":"examples/generated/pauli_gns_construction/#Summary","page":"GNS Construction for Pauli Operators","title":"Summary","text":"","category":"section"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"✓ GNS reconstruction successfully extracts operator representations from moments","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"✓ Reconstructed operators satisfy the correct algebraic relations","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"✓ Works for both pure states (low rank) and mixed states (higher rank)","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"✓ Operators are unique up to unitary transformations","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"","category":"page"},{"location":"examples/generated/pauli_gns_construction/","page":"GNS Construction for Pauli Operators","title":"GNS Construction for Pauli Operators","text":"This page was generated using Literate.jl.","category":"page"},{"location":"apis/polynomials/#Fast-Polynomials","page":"Polynomials","title":"Fast Polynomials","text":"","category":"section"},{"location":"apis/polynomials/#Variables","page":"Polynomials","title":"Variables","text":"","category":"section"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials.Variable","page":"Polynomials","title":"NCTSSoS.FastPolynomials.Variable","text":"Variable\n\nA Variable represents a symbolic variable in a polynomial expression.\n\nFields\n\nname::Symbol: The name of the variable\niscomplex::Bool: Whether the variable is complex\n\n\n\n\n\n","category":"type"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials.buildpolyvar-Tuple{Any, Any}","page":"Polynomials","title":"NCTSSoS.FastPolynomials.buildpolyvar","text":"buildpolyvar(var, iscomplex)\n\nBuilds a polynomial variable declaration from a symbol or expression.\n\nArguments\n\nvar: Either a Symbol for single variable or Expr for array variables\niscomplex::Bool: Whether the variables are complex\n\nReturns\n\nTuple of (variable_name, expression) for variable creation\n\n\n\n\n\n","category":"method"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials.get_basis-Tuple{Vector{NCTSSoS.FastPolynomials.Variable}, Int64}","page":"Polynomials","title":"NCTSSoS.FastPolynomials.get_basis","text":"get_basis(vars::Vector{Variable}, d::Int)\n\nGenerates a sorted basis of all monomials up to a given degree.\n\nArguments\n\nvars::Vector{Variable}: Variables to use in the basis\nd::Int: Maximum degree of monomials\n\nReturns\n\nVector{Monomial}: Sorted basis containing all monomials of degrees 0 through d\n\n\n\n\n\n","category":"method"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials.monomials-Union{Tuple{D}, Tuple{Vector{NCTSSoS.FastPolynomials.Variable}, Val{D}}} where D","page":"Polynomials","title":"NCTSSoS.FastPolynomials.monomials","text":"monomials(vars::Vector{Variable}, cur_d::Int)\n\nGenerates all monomials of a specific degree from given variables.\n\nArguments\n\nvars::Vector{Variable}: Variables to use in monomials\ncur_d::Int: Degree of monomials to generate\n\nReturns\n\nVector{Monomial}: All monomials of degree cur_d in the given variables\n\n\n\n\n\n","category":"method"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials.polyarrayvar-Tuple{Any, Vararg{Any}}","page":"Polynomials","title":"NCTSSoS.FastPolynomials.polyarrayvar","text":"polyarrayvar(prefix, indices...; iscomplex=false)\n\nCreates an array of variables with indexed names.\n\nArguments\n\nprefix::String: The base name for the variables\nindices...: Variable number of index ranges like i1, i2, ...\n\nKeyword Arguments\n\niscomplex::Bool: Whether the variables are complex\n\nReturns\n\nArray of Variable objects with names formatted as prefix[i1,i2,...]\n\n\n\n\n\n","category":"method"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials.@ncpolyvar-Tuple","page":"Polynomials","title":"NCTSSoS.FastPolynomials.@ncpolyvar","text":"@ncpolyvar(args...)\n\nMacro to create non-commutative polynomial variables (hermitian operators).\n\nArguments\n\nargs...: Variable arguments specifying variable names (symbols or indexed expressions)\n\nReturns\n\nTuple of created Variable objects\n\nExample\n\njulia> @ncpolyvar x y z     # Creates three real variables\n(x, y, z)\n\njulia> @ncpolyvar u[1:3]     # Creates array of variables u[1], u[2], u[3]\n(Variable[u₁, u₂, u₃],)\n\n\n\n\n\n","category":"macro"},{"location":"apis/polynomials/#Monomials","page":"Polynomials","title":"Monomials","text":"","category":"section"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials.Monomial","page":"Polynomials","title":"NCTSSoS.FastPolynomials.Monomial","text":"Monomial\n\nA monomial represented as a product of variables raised to integer powers. Automatically consolidates consecutive identical variables and removes zero exponents.\n\nFields\n\nvars::Vector{Variable}: Variables in the monomial\nz::Vector{Int}: Corresponding non-zero exponents\n\nInvariants\n\nz does not contain zeros\nvars does not contain consecutive same variables\nLength of vars equals length of z\n\n\n\n\n\n","category":"type"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials._comm!-Tuple{NCTSSoS.FastPolynomials.Monomial, Dict{NCTSSoS.FastPolynomials.Variable, Int64}}","page":"Polynomials","title":"NCTSSoS.FastPolynomials._comm!","text":"_comm!(mono::Monomial, comm_gps::Vector{Vector{Variable}})\n\nStably sorts variables in the monomial based on their commutative group indices.\n\nArguments\n\nmono::Monomial: The monomial to project\ncomm_gps::Dict{Variable,Int}: Dictionary mapping varaible to commutative group index\n\nReturns\n\nnothing\n\nExample\n\njulia> @ncpolyvar x y; comm_gps = Dict(x=>1,y=>2);\n\njulia> mono1 = x*y*x*y\nx¹y¹x¹y¹\n\njulia> _comm!(mono1, comm_gps)\n\njulia> mono1\nx¹x¹y¹y¹\n\n\n\n\n\n","category":"method"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials.monomial-Tuple{Any, Any}","page":"Polynomials","title":"NCTSSoS.FastPolynomials.monomial","text":"monomial(vars, z)\n\nCreates a monomial by converting inputs to proper Vector types.\n\nArguments\n\nvars: Collection of variables\nz: Collection of exponents\n\nReturns\n\nMonomial: Monomial with collected variables and exponents\n\n\n\n\n\n","category":"method"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials.star-Tuple{NCTSSoS.FastPolynomials.Monomial}","page":"Polynomials","title":"NCTSSoS.FastPolynomials.star","text":"star(m::Monomial)\n\nComputes the adjoint (star) of a monomial by reversing variable order and exponents.\n\nArguments\n\nm::Monomial: The monomial to compute the adjoint of\n\nReturns\n\nMonomial: Adjoint monomial with reversed variables and exponents\n\n\n\n\n\n","category":"method"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials.variables-Tuple{NCTSSoS.FastPolynomials.Monomial}","page":"Polynomials","title":"NCTSSoS.FastPolynomials.variables","text":"variables(m::Monomial)\n\nExtracts all unique variables appearing in a monomial.\n\nArguments\n\nm::Monomial: The monomial\n\nReturns\n\nVector{Variable}: Unique variables in the monomial\n\n\n\n\n\n","category":"method"},{"location":"apis/polynomials/#Polynomials","page":"Polynomials","title":"Polynomials","text":"","category":"section"},{"location":"apis/polynomials/#State-Polynomial","page":"Polynomials","title":"State Polynomial","text":"","category":"section"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials.NCStateWord","page":"Polynomials","title":"NCTSSoS.FastPolynomials.NCStateWord","text":"NCStateWord\n\nA non-commutative state word combining a commutative StateWord with a non-commutative Monomial. Represents mixed commutative-noncommutative polynomial expressions.\n\nFields\n\nsw::StateWord: Commutative state word part\nnc_word::Monomial: Non-commutative monomial part\n\nExamples\n\njulia> @ncpolyvar x y z\n(x, y, z)\n\njulia> sw = ς(x^2*y)\n<x²y¹>\n\njulia> ncsw = sw * (x*z)\n<x²y¹> * x¹z¹\n\n\n\n\n\n","category":"type"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials.StateWord","page":"Polynomials","title":"NCTSSoS.FastPolynomials.StateWord","text":"StateWord\n\nA state word representing a product of state monomials. Automatically removes identity elements and maintains sorted order. A state monomial is the expectation value of a monomials of noncommutative operators with respect to a state.\n\nFields\n\nstate_monos::Vector{Monomial}: Sorted vector of non-identity state monomials\n\nConstructor\n\nCreates a StateWord from monomials, filtering out identity elements and sorting. If all monomials are identity, stores a single identity monomial.\n\n\n\n\n\n","category":"type"},{"location":"apis/polynomials/#Base.hash-Tuple{NCTSSoS.FastPolynomials.NCStateWord, UInt64}","page":"Polynomials","title":"Base.hash","text":"Base.hash(a::NCStateWord, u::UInt)\n\nComputes hash value for an NCStateWord based on both components.\n\nArguments\n\na::NCStateWord: The NCStateWord to hash\nu::UInt: Hash seed value\n\nReturns\n\nUInt: Hash value combining hashes of state word and non-commutative word\n\n\n\n\n\n","category":"method"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials.expval-Union{Tuple{NCTSSoS.FastPolynomials.NCStateWord{ST}}, Tuple{ST}} where ST","page":"Polynomials","title":"NCTSSoS.FastPolynomials.expval","text":"expval(a::NCStateWord)\n\nComputes the expectation value by combining state monomials with the non-commutative word.\n\nArguments\n\na::NCStateWord: The NCStateWord\n\nReturns\n\nStateWord: StateWord containing all state monomials plus the non-commutative word\n\n\n\n\n\n","category":"method"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials.tr-Tuple{Union{NCTSSoS.FastPolynomials.Monomial, NCTSSoS.FastPolynomials.Variable}}","page":"Polynomials","title":"NCTSSoS.FastPolynomials.tr","text":"tr(m::Union{Monomial,Variable})\n\nCreates a StateWord with MaxEntangled state type from a monomial or variable. The name tr stands for trace, commonly used in quantum contexts.\n\nArguments\n\nm::Union{Monomial,Variable}: Monomial or variable to convert\n\nReturns\n\nStateWord{MaxEntangled}: StateWord with MaxEntangled state type containing the input as a single state monomial\n\nExample\n\njulia> @ncpolyvar x y z\n(x, y, z)\n\njulia> tr(x^2*y)\ntr(x²y¹)\n\n\n\n\n\n","category":"method"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials.ς-Tuple{Union{NCTSSoS.FastPolynomials.Monomial, NCTSSoS.FastPolynomials.Variable}}","page":"Polynomials","title":"NCTSSoS.FastPolynomials.ς","text":"ς(m::Union{Monomial,Variable})\n\nCreates a StateWord from a monomial or variable using the Greek letter ς (sigma).\n\nArguments\n\nm::Union{Monomial,Variable}: Monomial or variable to convert\n\nReturns\n\nStateWord: StateWord containing the input as a single state monomial\n\nExample\n\njulia> @ncpolyvar x y z\n(x, y, z)\n\njulia> ς(x^2*y)\n<x²y¹>\n\n\n\n\n\n","category":"method"},{"location":"apis/polynomials/#Simplification-Interface","page":"Polynomials","title":"Simplification Interface","text":"","category":"section"},{"location":"apis/polynomials/#Utilities","page":"Polynomials","title":"Utilities","text":"","category":"section"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials.sorted_union-Tuple","page":"Polynomials","title":"NCTSSoS.FastPolynomials.sorted_union","text":"sorted_union(xs...)\n\nReturns sorted union of multiple collections.\n\nArguments\n\nxs...: Variable number of collections\n\nReturns\n\nSorted vector containing union of all input collections\n\n\n\n\n\n","category":"method"},{"location":"apis/polynomials/#NCTSSoS.FastPolynomials.sorted_unique-Tuple{Any}","page":"Polynomials","title":"NCTSSoS.FastPolynomials.sorted_unique","text":"sorted_unique(xs)\n\nReturns sorted unique elements from a collection.\n\nArguments\n\nxs: Collection to process\n\nReturns\n\nSorted vector of unique elements\n\n\n\n\n\n","category":"method"},{"location":"apis/sparsities/#Sparsities","page":"Sparsities","title":"Sparsities","text":"","category":"section"},{"location":"apis/sparsities/#NCTSSoS.CorrelativeSparsity","page":"Sparsities","title":"NCTSSoS.CorrelativeSparsity","text":"CorrelativeSparsity\n\nStructure representing the correlative sparsity pattern of a polynomial optimization problem.\n\nFields\n\ncliques::Vector{Vector{Variable}}: Groups of variables that form cliques in the sparsity graph\ncons::Vector{P}: All constraints in the problem\nclq_cons::Vector{Vector{Int}}: Constraint indices assigned to each clique, regardless of equality or inequality\nglobal_cons::Vector{Int}: Constraint indices not captured by any single clique\nclq_mtx_basis::Vector{Vector{Monomial}}: Monomial bases for moment/localizing matrices within each clique\n\n\n\n\n\n","category":"type"},{"location":"apis/sparsities/#NCTSSoS.get_correlative_graph","page":"Sparsities","title":"NCTSSoS.get_correlative_graph","text":"get_correlative_graph(ordered_vars::Vector{Variable}, obj::Polynomial{T}, cons::Vector{Polynomial{T}}, order::Int) where {T}\n\nConstructs a correlative sparsity graph from polynomial optimization problem components.\n\nArguments\n\nordered_vars::Vector{Variable}: Variables in the order to appear in the graph\nobj::Polynomial{T}: Objective polynomial\ncons::Vector{Polynomial{T}}: Constraint polynomials\norder::Int: Order of the moment relaxation\n\nReturns\n\nSimpleGraph: Graph representing variable correlations\n\n\n\n\n\n","category":"function"},{"location":"apis/sparsities/#NCTSSoS.assign_constraint","page":"Sparsities","title":"NCTSSoS.assign_constraint","text":"assign_constraint(cliques::Vector{Vector{Variable}}, cons::Vector{Polynomial{T}}) where {T}\n\nAssigns constraints to cliques based on variable support.\n\nArguments\n\ncliques::Vector{Vector{Variable}}: Variable cliques\ncons::Vector{P}: Constraint polynomials\n\nReturns\n\nTuple{Vector{Vector{Int}}, Vector{Int}}: Tuple containing:\nConstraint indices for each clique\nGlobal constraint indices not captured by any single clique\n\n\n\n\n\n","category":"function"},{"location":"apis/sparsities/#NCTSSoS.correlative_sparsity","page":"Sparsities","title":"NCTSSoS.correlative_sparsity","text":"correlative_sparsity(pop::PolyOpt{T}, order::Int, elim_algo::EliminationAlgorithm) where {T}\n\nDecomposes a polynomial optimization problem into a correlative sparsity pattern by identifying variable cliques and assigning constraints to cliques, enabling block-structured semidefinite relaxations.\n\nArguments\n\npop::PolyOpt{T}: Polynomial optimization problem containing objective, constraints, and variables\norder::Int: Order of the moment relaxation\nelim_algo::EliminationAlgorithm: Algorithm for clique tree elimination\n\nReturns\n\nCorrelativeSparsity: Structure containing:\ncliques: Groups of variables that form cliques in the sparsity graph\ncliques_cons: Constraint indices assigned to each clique\nglobal_cons: Constraint indices not captured by any single clique\ncliques_idcs_bases: Monomial bases for indexing moment/localizing matrices within each clique\n\n\n\n\n\n","category":"function"},{"location":"apis/sparsities/#NCTSSoS.TermSparsity","page":"Sparsities","title":"NCTSSoS.TermSparsity","text":"TermSparsity\n\nStructure representing term sparsity information for polynomial optimization.\n\nFields\n\nterm_sparse_graph_supp::Vector{Monomial}: Support of the term sparsity graph\nblock_bases::Vector{Vector{Monomial}}: Bases of moment/localizing matrices in each block\n\n\n\n\n\n","category":"type"},{"location":"apis/sparsities/#NCTSSoS.term_sparsities","page":"Sparsities","title":"NCTSSoS.term_sparsities","text":"term_sparsities(initial_activated_supp::Vector{M}, cons::Vector{P}, mom_mtx_bases::Vector{M}, localizing_mtx_bases::Vector{Vector{M}}, ts_algo::EliminationAlgorithm, sa::SimplifyAlgorithm) where {T,P<:AbstractPolynomial{T},M}\n\nComputes term sparsity structures for the moment matrix and all localizing matrices.\n\nArguments\n\ninitial_activated_supp::Vector{M}: Initial set of activated support monomials\ncons::Vector{P}: Vector of constraint polynomials\nmom_mtx_bases::Vector{M}: Basis monomials for the moment matrix\nlocalizing_mtx_bases::Vector{Vector{M}}: Basis monomials for each localizing matrix corresponding to constraints\nts_algo::EliminationAlgorithm: Algorithm for clique tree elimination in term sparsity graphs\nsa::SimplifyAlgorithm: Algorithm for simplifying polynomial expressions\n\nReturns\n\nVector{TermSparsity}: Vector containing term sparsity structures, with the first element corresponding to the moment matrix and subsequent elements corresponding to localizing matrices for each constraint\n\n\n\n\n\n","category":"function"},{"location":"apis/sparsities/#NCTSSoS.get_term_sparsity_graph","page":"Sparsities","title":"NCTSSoS.get_term_sparsity_graph","text":"get_term_sparsity_graph(cons_support::Vector{Monomial}, activated_supp::Vector{Monomial}, basis::Vector{Monomial})\n\nConstructs a term sparsity graph for polynomial constraints.\n\nArguments\n\ncons_support::Vector{Monomial}: Support monomials of constraints\nactivated_supp::Vector{Monomial}: Support from previous iterations\nbases::Vector{Monomial}: Basis used to index the moment matrix\n\nReturns\n\nSimpleGraph: Term sparsity graph\n\n\n\n\n\n","category":"function"},{"location":"apis/sparsities/#NCTSSoS.iterate_term_sparse_supp","page":"Sparsities","title":"NCTSSoS.iterate_term_sparse_supp","text":"iterate_term_sparse_supp(activated_supp::Vector{Monomial}, poly::Polynomial, basis::Vector{Monomial}, elim_algo::EliminationAlgorithm)\n\nIteratively computes term sparsity support for a polynomial.\n\nArguments\n\nactivated_supp::Vector{Monomial}: Currently activated support monomials\npoly::Polynomial: Input polynomial\nbasis::Vector{Monomial}: Basis monomials\nelim_algo::EliminationAlgorithm: Elimination algorithm for clique decomposition\n\nReturns\n\nTermSparsity: Term sparsity structure containing graph support and block bases\n\n\n\n\n\n","category":"function"},{"location":"apis/sparsities/#NCTSSoS.term_sparsity_graph_supp","page":"Sparsities","title":"NCTSSoS.term_sparsity_graph_supp","text":"term_sparsity_graph_supp(G::SimpleGraph, basis::Vector{Monomial}, g::Polynomial)\n\nComputes the support of a term sparsity graph for a given polynomial.\n\nArguments\n\nG::SimpleGraph: Term sparsity graph\nbasis::Vector{Monomial}: Basis monomials\ng::Polynomial: Input polynomial\n\nReturns\n\nVector{Monomial}: Support monomials for the term sparsity graph\n\n\n\n\n\n","category":"function"},{"location":"apis/sparsities/#Eliminations","page":"Sparsities","title":"Eliminations","text":"","category":"section"},{"location":"apis/sparsities/#NCTSSoS.clique_decomp","page":"Sparsities","title":"NCTSSoS.clique_decomp","text":"clique_decomp(G::SimpleGraph, clique_alg::EliminationAlgorithm)\n\nDecomposes a graph into cliques using the specified elimination algorithm.\n\nArguments\n\nG::SimpleGraph: Input graph to decompose\nclique_alg::EliminationAlgorithm: Algorithm for clique tree elimination\n\nReturns\n\nVector{Vector{Int}}: Vector of cliques, each containing vertex indices\n\n\n\n\n\n","category":"function"},{"location":"examples/generated/werner_state/#Werner-State","page":"Werner State","title":"Werner State","text":"","category":"section"},{"location":"examples/generated/werner_state/","page":"Werner State","title":"Werner State","text":"Werner states (Huber et al., 2022) are a fundamental class of mixed quantum states in quantum information theory, named after physicist Reinhard Werner who introduced them in his seminal 1989 work on quantum entanglement. These states are characterized by their high degree of symmetry - they remain invariant under local unitary transformations that are the same on both subsystems of a bipartite quantum system. Werner states are particularly significant because they provide a clean theoretical framework for studying the relationship between quantum entanglement, Bell inequality violations, and quantum nonlocality. What makes them especially interesting is that they can exist in different regimes: some Werner states are separable (not entangled), others are entangled but do not violate Bell inequalities, and still others are both entangled and exhibit Bell inequality violations. This rich structure has made Werner states a cornerstone for understanding the subtle distinctions between different forms of quantum correlations and has led to numerous applications in quantum cryptography, quantum communication protocols, and fundamental tests of quantum mechanics.","category":"page"},{"location":"examples/generated/werner_state/","page":"Werner State","title":"Werner State","text":"note: Example Coming Soon\nThis example is currently under development. Please check back later for the complete implementation showing how to analyze Werner states using NCTSSoS.jl.\"}","category":"page"},{"location":"examples/generated/werner_state/","page":"Werner State","title":"Werner State","text":"","category":"page"},{"location":"examples/generated/werner_state/","page":"Werner State","title":"Werner State","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/polynomials/#polynomials","page":"Polynomials","title":"Polynomials in Non-Commutative Optimization","text":"","category":"section"},{"location":"manual/polynomials/","page":"Polynomials","title":"Polynomials","text":"NCTSSoS.jl is designed to solve optimization problems where the variables do not commute, a scenario that is the foundation of quantum mechanics. This page outlines the key polynomial types used in the package and their specific applications in many-body physics.","category":"page"},{"location":"manual/polynomials/","page":"Polynomials","title":"Polynomials","text":"(Image: Relation between different Polynomials)","category":"page"},{"location":"manual/polynomials/#non-commutative-polynomial","page":"Polynomials","title":"Non-Commutative Polynomials: The Language of Quantum Systems","text":"","category":"section"},{"location":"manual/polynomials/","page":"Polynomials","title":"Polynomials","text":"In quantum mechanics, the order of measurements matters. Non-commutative polynomials provide the natural language for this reality. They are the building blocks for constructing the Hamiltonian of a quantum system, which describes its total energy.","category":"page"},{"location":"manual/polynomials/#tracial-polynomial","page":"Polynomials","title":"Trace Polynomials: Probing Non-Local Correlations","text":"","category":"section"},{"location":"manual/polynomials/","page":"Polynomials","title":"Polynomials","text":"Trace polynomials are a specialized class of mathematical objects that consist of polynomials in noncommuting variables combined with traces of their products. Unlike ordinary commutative polynomials where variables can be freely rearranged (e.g., xy = yx), trace polynomials involve noncommutative variables where order matters, and they incorporate the trace operation—a fundamental concept from linear algebra and operator theory that computes the sum of diagonal elements of a matrix. These mathematical structures have gained significant attention due to their applications in quantum information theory, particularly in the context of optimizing quantum systems and analyzing violations of polynomial Bell inequalities. The optimization of trace polynomials subject to tracial constraints represents a natural extension of semidefinite programming techniques to the noncommutative setting, drawing from areas such as real algebraic geometry, operator theory, and noncommutative algebra to provide powerful tools for solving complex problems in quantum mechanics and related fields.","category":"page"},{"location":"manual/polynomials/#Mathematical-Framework","page":"Polynomials","title":"Mathematical Framework","text":"","category":"section"},{"location":"manual/polynomials/","page":"Polynomials","title":"Polynomials","text":"In the context of tracial polynomial optimization, we consider polynomials of the form:","category":"page"},{"location":"manual/polynomials/","page":"Polynomials","title":"Polynomials","text":"p(X₁, X₂, ..., Xₙ) = Σ cₐ tr(Xₐ)","category":"page"},{"location":"manual/polynomials/","page":"Polynomials","title":"Polynomials","text":"where:","category":"page"},{"location":"manual/polynomials/","page":"Polynomials","title":"Polynomials","text":"X₁, X₂, ..., Xₙ are noncommuting matrix variables\ncₐ are real coefficients\nXₐ represents monomials in the noncommuting variables\ntr(·) denotes the trace operation","category":"page"},{"location":"manual/polynomials/","page":"Polynomials","title":"Polynomials","text":"The key challenge in tracial polynomial optimization is to find the minimum or maximum value of such polynomials subject to tracial constraints, which may include:","category":"page"},{"location":"manual/polynomials/","page":"Polynomials","title":"Polynomials","text":"Trace normalization conditions\nPositivity constraints on trace polynomials\nAdditional structural constraints on the matrix variables","category":"page"},{"location":"manual/polynomials/#state-polynomial","page":"Polynomials","title":"State Polynomials","text":"","category":"section"},{"location":"manual/polynomials/","page":"Polynomials","title":"Polynomials","text":"State polynomials are functions of the expectation values themselves. This structure is essential for defining nonlinear Bell inequalities. These more complex inequalities provide powerful and subtle tests of quantum mechanics, allowing researchers to explore the boundary between the quantum and classical worlds in greater detail.","category":"page"},{"location":"manual/polynomials/#eigenvalue-polynomial","page":"Polynomials","title":"Eigenvalue Polynomials","text":"","category":"section"},{"location":"manual/polynomials/","page":"Polynomials","title":"Polynomials","text":"These polynomials are used to find the possible energy levels (eigenvalues) of a quantum Hamiltonian. A primary application is to find the ground state energy—the lowest possible energy of a many-body system. This is a fundamental problem in condensed matter physics.","category":"page"},{"location":"#NCTSSoS","page":"Home","title":"NCTSSoS","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NCTSSoS.jl aims to provide a user-friendly and efficient tool for solving noncommutative polynomial optimization problems which is based on the structured moment-SOHS hierarchy.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Ergonomic API: Easy to use and intuitive interface for defining polynomial optimization problems!\nGeneral Objectives: Eigenvalue, State, Tracial Polynomial optimizations are supported!\nCorrelative and Term Sparsities: Plug-and-Play API for utilizing sparsities in reducing cost of solving optimization problems.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Performance Issue\nVersion 0.1.0 has performance issues! We plan to release a new version with better performance in the near future. Stay tuned!","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NCTSSoS.jl could be installed by running","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"NCTSSoS\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"To make sure everything works, you can execute the test suite.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.test(\"NCTSSoS\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Can't wait to try NCTSSoS.jl in action? Hop to Quick Start.","category":"page"},{"location":"#Credits","page":"Home","title":"Credits","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following people are involved in the development of NCTSSoS.jl:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Jie Wang, Academy of Mathematics and Systems Science, Chinese Academy of Sciences.\nJin-Guo Liu, Advanced Materials Thrust , The Hong Kong University of Science and Technology(Guangzhou).\nYusheng Zhao, Advanced Materials Thrust , The Hong Kong University of Science and Technology(Guangzhou).\nHuanhai Zhou, Advanced Materials Thrust , The Hong Kong University of Science and Technology(Guangzhou).","category":"page"},{"location":"","page":"Home","title":"Home","text":"If this project is useful for your work please consider","category":"page"},{"location":"","page":"Home","title":"Home","text":"Citing NCTSSoS.jl\nLeave us a star on GitHub!!","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NCTSSoS.jl is licensed under the MIT License.","category":"page"},{"location":"#Related-packages","page":"Home","title":"Related packages","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TSSOS: Commutative polynomial optimization\nChordalGraph: Chordal graphs and chordal extentions","category":"page"},{"location":"manual/sparsities/#sparsities","page":"Sparsities","title":"Sparsities","text":"","category":"section"},{"location":"manual/sparsities/","page":"Sparsities","title":"Sparsities","text":"The main goal is to reduce the number of monomials used in indexing the moment matrix. This is a crucial step in making the semidefinite programs more efficient, as the size of the moment matrix directly affects the computational cost of solving the problem. By exploiting the structure of the problem, we can often significantly reduce the number of monomials needed, leading to substantial performance improvements.","category":"page"},{"location":"manual/sparsities/","page":"Sparsities","title":"Sparsities","text":"(Image: Overview of how sparsity is exploited)","category":"page"},{"location":"manual/sparsities/#correlative-sparsity","page":"Sparsities","title":"Correlative Sparsity","text":"","category":"section"},{"location":"manual/sparsities/","page":"Sparsities","title":"Sparsities","text":"Correlative sparsity, also known as chordal sparsity, arises from the underlying structure of the problem's variables. In many physical systems, not all variables are directly coupled. This lack of coupling can be represented by a graph, where the vertices are the variables and the edges represent direct interactions. The correlative sparsity pattern is then determined by the maximal cliques of this graph. A clique is a subset of vertices where every two distinct vertices are adjacent. By only considering monomials within these maximal cliques, we can significantly reduce the size of the moment matrix. This is because the moment matrix will be block-diagonal, with each block corresponding to a maximal clique.","category":"page"},{"location":"manual/sparsities/","page":"Sparsities","title":"Sparsities","text":"(Image: Hand waving effect of Correlative Sparsity)","category":"page"},{"location":"manual/sparsities/#term-sparsity","page":"Sparsities","title":"Term Sparsity","text":"","category":"section"},{"location":"manual/sparsities/","page":"Sparsities","title":"Sparsities","text":"Term sparsity, also known as ideal sparsity, is a more direct way of exploiting the structure of the polynomials involved in the problem. If a certain monomial does not appear in any of the polynomial constraints, then it can be safely removed from the basis of the moment matrix. This is because the corresponding entry in the moment matrix will not be constrained by the problem, and thus can be set to zero without affecting the solution. This type of sparsity is particularly effective when the polynomials are sparse, i.e., they have only a few non-zero terms.","category":"page"},{"location":"manual/sparsities/","page":"Sparsities","title":"Sparsities","text":"(Image: Hand waving effect of Term Sparsity)","category":"page"}]
}

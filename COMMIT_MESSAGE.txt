feat: add pauli_algebra and bosonic_algebra constructor functions

Add two convenience functions for creating quantum algebra systems with
proper variables, simplification rules, and commutation relation constraints.

## New Functions

### pauli_algebra(N::Int)
Creates a Pauli algebra system for N spin-1/2 sites with:
- Variables: x[1:N], y[1:N], z[1:N] representing Pauli operators σₓ, σᵧ, σ_z
- 6N equality constraints encoding Pauli commutation relations
- SimplifyAlgorithm with is_unipotent=true (operators square to identity)
- N commutation groups, one per site

### bosonic_algebra(N::Int)
Creates a bosonic algebra system for N harmonic oscillator modes with:
- Variables: q[1:N], p[1:N] for position and momentum operators
- N equality constraints encoding canonical commutation [q,p]=i
- SimplifyAlgorithm with no special properties
- N commutation groups, one per mode

## Implementation Details

Both functions return a NamedTuple containing:
- variables: Tuple of variable vectors
- simplify_algo: Configured SimplifyAlgorithm
- equality_constraints: Vector of constraint polynomials
- inequality_constraints: Empty vector
- comm_gps: Commutation groups

## Benefits

1. Simplified setup for quantum optimization problems
2. Automated generation of correct algebraic relations
3. Consistent interface across different quantum systems
4. Error prevention through validated constraint generation

## Testing

- 64 comprehensive tests added (35 Pauli + 29 Bosonic)
- Tests cover structure validation, constraint correctness, and integration
- All tests pass successfully

## Files Added

- src/algebra_constructors.jl: Implementation of both functions
- test/algebra_constructors.jl: Comprehensive test suite

## Files Modified

- src/NCTSSoS.jl: Added include and exports
- test/runtests.jl: Added test inclusion

## Usage Example

```julia
# Pauli system for Heisenberg model
sys = pauli_algebra(3)
x, y, z = sys.variables
ham = sum(ComplexF64(0.25) * op[i] * op[mod1(i+1,3)] 
          for op in [x,y,z] for i in 1:3)
pop = cpolyopt(ham;
    eq_constraints=sys.equality_constraints,
    comm_gps=sys.comm_gps,
    is_unipotent=true)

# Bosonic system for coupled oscillators
sys = bosonic_algebra(2)
q, p = sys.variables
ham = ComplexF64(0.5) * sum(p[i]^2 + q[i]^2 for i in 1:2)
pop = cpolyopt(ham;
    eq_constraints=sys.equality_constraints,
    comm_gps=sys.comm_gps)
```

## Technical Notes

Pauli commutation relations encoded as:
- [σₓ, σᵧ] = 2i·σ_z → x*y - i*z = 0, y*x + i*z = 0
- [σᵧ, σ_z] = 2i·σₓ → y*z - i*x = 0, z*y + i*x = 0
- [σ_z, σₓ] = 2i·σᵧ → z*x - i*y = 0, x*z + i*y = 0

Bosonic canonical commutation encoded as:
- [qᵢ, pᵢ] = i → q*p - p*q - i = 0

Closes: Goal 1 (Core Algebra Infrastructure)
